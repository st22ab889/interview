=======================================================================日志基础=====================================================================

CentOS 5 之前版本采用的日志管理系统服务
    syslogd: system application 记录应用(应用程序)日志
    klogd: linux kernel 记录内核日志
    
    事件记录格式：
        日期时间 主机 进程[pid]: 事件内容
        C/S架构：通过TCP或UDP协议的服务完成日志记录传送，将分布在不同主机的日志实现集中管理


从CentOS 6 开始，rsyslog是系统中用来管理日志的关键服务。能够接受来自各种来源的输入，并将其转换，然后输出到不同的目的地。官方网站: https://www.rsyslog.com/
    rsyslog 特性：
        多线程
        UDP, TCP, SSL, TLS, RELP
        MySQL, PGSQL, Oracle实现日志存储
        强大的过滤器，可实现过滤记录日志信息中任意部分
        自定义输出格式
        适用于企业级中继链
    总结：
        性能更好，支持的日志来源和输出目的地更加丰富，sysklogd支持各种形式的日志数据，功能更加全面！
        rsyslog运行在单机上，收集和管理主机上的相关日志，通常适合于单机日志的管理，适合于单机小环境。
        传统的 rsyslog 存放的日志是分散的，每个主机、每个应用程序都有自己的日志！
        rsyslog 也支持网络，可以通过网络来发送日志！
        rsyslog 的日志来源可能来自本机或本机上的应用程序，也可以来自网络！


日志服务其它解决方案
    ELK(Elasticsearch, Logstash + Filebeat, Kibana)：FlieBeat是一个轻量级的日志收集处理工具，FlieBeat占用资源少，适用于在各个服务器上搜集日之后，传输给Logstash。
    EFK(Elasticsearch, Fluentd, Kibana): 使用fluentd代替了logstash.
        也可以使用Fluentd的插件(fluent-plugin-elasticsearch)直接将日志发送给 Elasticsearch ，可以根据自己的需要替换掉 Filebeat ，从而形成 Fluentd + ElasticSearch + Kibana 的架构，也称作 EFK 。

    由于 logstash 内存占用较大，灵活性相对没那么好， ELK 正在被 EFK 逐步替代. Kubernetes 中比较流行的日志收集解决方案是 Elasticsearch 、 Fluentd 和 Kibana （ EFK） 技术栈，也是官方现在比较推荐的一种方案。
    Fluentd 是一个收集日志文件的开源软件，目前提供数百个插件可用于存储大数据用于日志搜索，数据分析和存储.


系统日志术语
	facility(设施)，从功能或程序上对日志进行归类。比如约定不同的日志存在不同的文件中。
		内置分类
			auth, authpriv, cron, daemon, ftp, kern, lpr, mail, news, security(auth),user, uucp, syslog
                auth：验证
                authpriv：验证和授权(权限)
                daemon：守护进程
                lpr：打印服务
                news：新闻组，实际上就是早期的bbs
                uucp：是传统的unix打印服务
		自定义的分类：如果某个服务的日志不适合内置分类，可以放到自定义分类中
			local0-local7

	Priority 优先级别，从低到高排序
		debug, info, notice, warn(warning), err(error), crit(critical), alert, emerg(panic)
			debug：普通信息，详细显示
			info：重要事件
	
	设施和优先级可以参看帮助：
		yum -y install man-pages
		man 3 syslog
        man logger

=======================================================================rsyslog====================================================================

rsyslog实现网络日志
    利用 rsyslog 协议，可以将多个远程主机的日志，发送到集中的日志服务器，方便统一管理。514端口是rsyslog支持远程连接的默认端口，

rsyslog 相关文件
	程序包：rsyslog
	主程序：/usr/sbin/rsyslogd
	CentOS 6：/etc/rc.d/init.d/rsyslog {start|stop|restart|status}
	CentOS 7,8：/usr/lib/systemd/system/rsyslog.service
	配置文件：/etc/rsyslog.conf，/etc/rsyslog.d/*.conf
	库文件： /lib64/rsyslog/*.so

    yum install -y rsyslog
    rpm -qi rsyslog

    rpm -ql rsyslog
    /etc/logrotate.d/syslog
    /etc/pki/rsyslog
    /etc/rsyslog.conf							# rsyslog 配置文件
    /usr/lib/systemd/system/rsyslog.service		# service文件
    /usr/lib64/rsyslog/mmanon.so		        # 有很多so文件，说明是模块化，很多功能由模块来提供。"apache httpd"也是使用模块化的方式提供功能！
    /usr/sbin/rsyslogd							# 程序名


rsyslog配置文件
	
	/etc/rsyslog.conf 配置文件格式：由三部分组成
		MODULES：相关模块配置，到底加载哪些模块，和"apache httpd"一样，用到这个功能的时候才加载到内存中
		GLOBAL DIRECTIVES：全局配置
		RULES：	日志记录相关的规则配置
	
	RULES配置格式：
		facility.priority; facility.priority… target
		
	facility格式：
		* 									# 所有的facility
		facility1,facility2,facility3,... 	# 指定的facility列表
	
	priority格式：
		*: 			所有级别
		none：		没有级别，即不记录
		PRIORITY：	指定级别（含）以上的所有级别
		=PRIORITY：	仅记录指定级别的日志信息
	
	target格式：
		文件路径：通常在/var/log/，文件路径前的-表示异步写入
		用户：将日志事件通知给指定的用户，* 表示登录的所有用户
		日志服务器：@host，把日志送往至指定的远程UDP日志服务器 @@host 将日志发送到远程TCP日志服务器
		管道： | COMMAND，转发给其它命令处理
	
	通常的日志文件的格式：
		日志文件有很多，如： /var/log/messages,cron,secure等，基本格式都是类似的。格式如下：
			事件产生的日期时间 主机 进程(pid)：事件内容
	
	centos7和centos8的rsyslog配置文件的格式有点区别，但是区别不大。Ubuntu使用的也是rsyslog服务：
	

查看centos8的rsyslog服务的配置文件:
    cat /etc/rsyslog.conf
    # rsyslog configuration file

    # For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
    # or latest version online at http://www.rsyslog.com/doc/rsyslog_conf.html 
    # If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

    #### MODULES ####

    module(load="imuxsock" 	  # provides support for local system logging (e.g. via logger command)
        SysSock.Use="off") # Turn off message reception via local log socket; 
                # local messages are retrieved through imjournal now.
    module(load="imjournal" 	    # provides access to the systemd journal
        StateFile="imjournal.state") # File to store the position in the journal
    #module(load="imklog") # reads kernel messages (the same are read from journald)
    #module(load="immark") # provides --MARK-- message capability

    # Provides UDP syslog reception
    # for parameters see http://www.rsyslog.com/doc/imudp.html
    #module(load="imudp") # needs to be done just once
    #input(type="imudp" port="514")

    # Provides TCP syslog reception
    # for parameters see http://www.rsyslog.com/doc/imtcp.html
    #module(load="imtcp") # needs to be done just once
    #input(type="imtcp" port="514")

    #### GLOBAL DIRECTIVES ####

    # Where to place auxiliary files
    global(workDirectory="/var/lib/rsyslog")

    # Use default timestamp format
    module(load="builtin:omfile" Template="RSYSLOG_TraditionalFileFormat")

    # Include all config files in /etc/rsyslog.d/
    include(file="/etc/rsyslog.d/*.conf" mode="optional")

    #### RULES ####

    # Log all kernel messages to the console.
    # Logging much else clutters up the screen.
    #kern.*                                                 /dev/console

    # Log anything (except mail) of level info or higher.
    # Don't log private authentication messages!
    // "*.info"中的*表示表示所有类别，info表示info以及比info级别更高的日志都包含在内
    // "mail.none;authpriv.none;cron.none"表示不包含mail、authpriv、cron服务，none 表示排除，排除的原因是在下面对这些服务有单独的规则定义
    // 下面的规则表示除了mail、authpriv、cron服务，所有服务的info以及info以上级别的日志都写进"/var/log/messages"文件中
    *.info;mail.none;authpriv.none;cron.none                /var/log/messages

    # The authpriv file has restricted access.
    authpriv.*                                              /var/log/secure         # "authpriv.*"中的*表示所有日志级别

    # Log all the mail messages in one place.
    // "-/var/"中的"-"表示异步写入(不立即写磁盘，先放缓冲区，累积一段时间日志后一起写磁盘，这样多次IO合并为1次IO，速度快，安全性差，有丢失数据的风险)
    mail.*                                                  -/var/log/maillog


    # Log cron stuff
    cron.*                                                  /var/log/cron

    # Everybody gets emergency messages
    // "omusrmsg"是一个模块，这个模块的功能是，当前登录到这个机器的每个人，都将收到emerg这个级别的日志。比如系统要重启，可能就会群发emerg消息
    // 注意：使用多个账户登录同一主机，然后重启，但没有模拟出效果，可能方法不对，也可能是重启不算emerg级别事件！ 
    *.emerg                                                 :omusrmsg:*

    # Save news errors of level crit and higher in a special file.
    uucp,news.crit                                          /var/log/spooler        # uucp 是传统的unix打印服务；news是新闻组，实际上就是早期的bbs 

    # Save boot messages also to boot.log
    local7.*                                                /var/log/boot.log       # "local7"是自定义分类，将和本地系统启动相关的信息记录到/var/log/boot.log文件中


    # ### sample forwarding rule ###
    #action(type="omfwd"  
    # An on-disk queue is created for this action. If the remote host is
    # down, messages are spooled to disk and sent when it is up again.
    #queue.filename="fwdRule1"       # unique name prefix for spool files
    #queue.maxdiskspace="1g"         # 1gb space limit (use as much as possible)
    #queue.saveonshutdown="on"       # save messages to disk on shutdown
    #queue.type="LinkedList"         # run asynchronously
    #action.resumeRetryCount="-1"    # infinite retries if host is down
    # Remote Logging (we use TCP for reliable delivery)
    # remote_host is: name/ip, e.g. 192.168.0.1, port optional e.g. 10514
    #Target="remote_host" Port="XXX" Protocol="tcp")



查看Ubuntu1804的rsyslog服务的配置文件
    dpkg -l rsyslog				                        # 查看包信息
    /lib/systemd/system/rsyslog.service
    /etc/rsyslog.conf
    .......
    
    cat /etc/rsyslog.conf
    $IncludeConfig /etc/rsyslog.d/*.conf			    # 规则放在了"/etc/rsyslog.d/"目录下的配置文件中
    .......
    
    cd /etc/rsyslog.d; ls
    50-default.conf
    
    cat 50-default.conf
    *.*;auth,authpriv.none		-/var/log/syslog	    # 在Ubuntu上记录日志的主要文件是"syslog"，相当于centos7、8的 messages 文件
    .......


日志格式
	tail /var/log/messages
	Nov 12 08:34:18 centos8 dnf[14114]: Metadata cache created.
	......
	
        说明：
            "Nov 12 08:34:18"是事件产生的日期时间
            "centos8"是主机名最前面的部分
            "dnf[14114]"是进程名称和进程ID
            "Metadata cache created."是事件内容	
	

rsyslog 的日志来源可能来自本机或本机上的应用程序，也可以来自网络
	如果来自本地应用程序，就要求本地应用程序支持 rsyslog，比如 ssh 服务就可以基于 rsyslog 保存日志，但不是所有日志都会用到 rsyslog，
	有些服务有自己的日志，比如：
		mysql有慢查询日志、二进制日志、通用日志、事务日志等，这些日志文件都是MySQL自己管理；
		"apache httpd"有自己的访问日志、错误日志，也是"apache httpd"自己管理，不用rsyslog；	
	但有些小服务没有必要自己开发一套日志管理系统，所有就采用 rsyslog 服务来管理日志！
		
	查看ssh配置文件中的日志部分：
	
		cat /etc/ssh/sshd_config
		# Logging
		#SyslogFacility AUTH
		SyslogFacility AUTHPRIV			# 指定设施，AUTHPRIV 就是 rsyslog 指定的一个分类
		#LogLevel INFO
		.......
		
		cat /etc/rsyslog.conf
		# The authpriv file has restricted access.
		authpriv.*                                              /var/log/secure		# AUTHPRIV 分类的日志记录在这个文件
		.......
		
		tail -f -n0 /var/log/secure			# 使用 ssh 登录就可以看到日志信息	


示例：将ssh服务的日志记录至自定义的local的日志设备
    cat /etc/ssh/sshd_config
    # Logging
    #SyslogFacility AUTH
    #SyslogFacility AUTHPRIV
    SyslogFacility LOCAL6				                    # local0到local7为自定义日志分类
    #LogLevel INFO
    .......

    cat /etc/rsyslog.conf
    local7.*                                                /var/log/boot.log
    local6.*                                                /var/log/sshd.log		 # 这样就可以用一个独立的文件专门记录ssh服务的日志
    .......
    
    systemctl restart rsyslog sshd       # 当 sshd 服务一重启，就会生成"/var/log/sshd.log"文件
    
    tail -f -n0 /var/log/sshd.log

    logger -p local6.info "hello sshd"	 # logger是一个测试日志的工具，表示往 local6 这个分类写一个info级别的日志。local6分类对应的日志文件是"/var/log/sshd.log"，所以"hello sshd"将会写到 sshd.log 文件中
		

示例:把日志传到 rsyslog 服务器
    10.0.0.18 主机配置为日志服务器
        rpm -ql rsyslog | grep im

        vim /etc/rsyslog.conf                                           
        module(load="imudp") # needs to be done just once
        input(type="imudp" port="514")
        module(load="imtcp") # needs to be done just once				 # 开启TCP模块
        input(type="imtcp" port="514")	
        ......

        systemctl restart rsyslog


    10.0.0.8 主机配置为客户端
        vim /etc/rsyslog.conf                                           # 
        *.info;mail.none;authpriv.none;cron.none /var/log/messages	    # 保存在本机
        *.info;mail.none;authpriv.none;cron.none @@10.0.0.18:514	    # 使用TCP协议把日志发到远程主机，如果跨公网使用tcp协议，因为公网不稳定
        *.info;mail.none;authpriv.none;cron.none @10.0.0.18:514		    # 使用UDP协议把日志发到远程主机，udp在局域网中使用没有问题
        ......

            注意事项：
                rsyslog服务端口默认为514，可以不用指明端口，如果使用非默认端口，需要指明
                客户端发过去的日志根据服务器rsyslog的配置将日志保存在对应的文件中。比如服务器配置将日志保存在messages文件，那么客户端发过去的日志也保存在messages文件中
                客户端的主机名不要和其它客户端的主机名、以及服务端的主机名一样，如果主机名一样就不能区分出日志的来源
            
        hostnamectl set-hostname client-1.localhost	    # 该方法会直接写入 /etc/hostname 文件，并且立刻生效，重启后也生效
        exit                                            # 改主机名后退出重新登录也生效
        systemctl restart rsyslog
        logger "this is a test log on 10.0.0.8"	


    测试    
        cat /var/log/message	        # 在 10.0.0.8 主机上查看 message 文件 
        cat /var/log/message	        # 在 10.0.0.18 主机上查看 message 文件 

    改主机名:
        hostnamectl set-hostname <新主机名>                 # 并且立刻生效，重启后也生效
        修改 /etc/sysctl.conf 文件，添加 kernel.hostname=<新主机名>，然后执行 sysctl -p 使修改立即永久生效
        hostname <新主机名>                                  # 临时修改, 当前会话中立即生效  
        echo <新主机名 >> /proc/sys/kernel/hostname          # 临时修改, 当前会话中立即生效      
        sysctl kernel.hostname=<新主机名>                    # 临时修改, 当前会话中立即生效  


示例: 把日志数据存储到MySQL数据库
    
    二台主机
        rsyslog 日志服务器
            yum -y install rsyslog-mysql        # rsyslog 的日志记录要存储到MySQL数据库需要用到 rsyslog-mysql
        mysql 日志服务器
            yum -y install mysql-server
    

示例: 基于loganalyzer实现日志的web展示
    loganalyzer是用 php 语言实现的日志管理系统，可将MySQL数据库的日志用丰富的WEB方式进行展示，实际上就是LAMP架构！

    LAMP 架构，它指一组通常一起使用来运行动态网站或者服务器的自由软件：
		Linux，操作系统；
		Apache，网页服务器；https://httpd.apache.org/	
		MySQL，数据库管理系统（或者数据库服务器）；
		PHP 和有時 Perl 或 Python，脚本语言

    三台主机:
        rsyslog日志服务器
        MySQL数据库服务器
        httpd + php 服务器                       # Centos8上php默认就是"php-fpm"模式，Centos7上默认是模块模式     
            yum -y install httpd                # httpd 全称为 Hypertext Transfer Protocol Daemon(超文本传输协议守护进程)是 Apache HTTP Server 的主程序文件名(在Linux/Unix系统中)
            yum -y install php-gd	            # php-gd 是用来处理图片，可以用饼状图、柱状图等展示一些统计信息
            yum -y install php-mysql            # Centos7, centos7上默认是模块模式
            yum -y install php-mysqlnd          # Centos8, centos8上php默认就是"php-fpm"模式
            tar xvf loganalyzer-4.1.10.tar.gz   # 从http://loganalyzer.adiscon.com/downloads/ 下载
            tar xvf loganalyzer-4.1.10.tar.gz
            mv loganalyzer-4.1.10/src/ /var/www/html/log	

            ss -ntl     #  只看到httpd的默认80端口，但是没有php的默认9000端口，因为都在本机，所以走的是unix套接字，unix套接字是一个文件
            
            vi /etc/php-fpm.d/www.conf
		    listen = /run/php-fpm/www.sock		            # php-fpm 进程监听的不是一个端口，而是一个套接字文件
		
            grep www.sock /etc/httpd/conf.d/php.conf        # 在httpd的配置文件了调用了"www.sock"这个sock文件，也就是说"Apache httpd"知道收到php请求应该使用"www.sock"这个文件和php进行通讯 
            <FilesMatch \.php$>                                         # 仅 .php 文件由 PHP-FPM 处理
                SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"
            </FilesMatch>
            <FilesMatch \.(jpg|jpeg|png|gif|css|js|pdf|txt)$>           # 显式排除静态文件类型
                SetHandler default-handler
            </FilesMatch>
            <Location /api/>                                            # 仅 /api/ 路径下的请求由 PHP 处理
                SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"
            </Location>

            说明：	
                unix套接字意味着，如果是本机可以直接使用，因为"Apache httpd"和php安装在同一台机器上，所以它们之间通讯可以不走端口号，而走unix套接字！
                unix套接字相当于连接了两个应用程序，两个应用程序之间的通讯通过一个unix套接字文件来实现。


    补充:
        Apache HTTP Server(简称 Apache)是一个独立的 Web 服务器软件，它是用C 语言开发的开源项目，核心架构与 PHP、Java 等编程语言没有直接依赖关系。以下是详细说明：
            核心功能：Apache 是 HTTP 服务器，主要负责 处理静态资源（HTML、CSS、图片等）的请求，以及管理 HTTP 连接、负载均衡、反向代理等。 
            扩展性：通过模块化设计（如mod_php、mod_jk、mod_perl等），Apache 可以集成多种编程语言的引擎，但自身核心与这些语言无关。    
            Apache 与 PHP/Java 的关系类似 “餐厅” 与 “厨师”：
                Apache 是 “餐厅”，负责接待顾客（处理 HTTP 请求）、安排座位（管理连接）、传递菜品（分发资源）。
                PHP/Java 是 “厨师”，负责根据订单（请求）烹饪菜品（执行动态逻辑），但厨师本身不属于餐厅的基础设施。
            应用场景：
                搭配 PHP 时，常用于传统动态网站（如 WordPress、Discuz）。
                搭配 Java 时，通常作为 Tomcat 等应用服务器的前端代理，提升负载能力。    
            
            Apache 与 PHP 的关系
                集成方式：
                    模块模式： Apache 可以通过加载模块（如mod_php）来支持 PHP 脚本的执行。在模块模式下，PHP 作为 Apache 的一个模块运行。PHP 代码与 Apache 共享同一进程空间，每个 Apache 工作进程都包含 PHP 解释器。
                    PHP-FPM 模式：PHP-FPM 作为独立进程管理器运行，Web 服务器（如 Nginx/Apache）通过 FastCGI 协议与其通信。（类似 Nginx 的方式）。PHP-FPM 与 Web 服务器完全分离，各自独立管理进程。
                本质区别： Apache 负责处理 HTTP 请求、管理连接和分发资源，而 PHP 负责解析和执行动态脚本，两者是 “Web 服务器” 与 “脚本引擎” 的协作关系。

            Apache 与 Java 的关系
                集成方式： Apache 可以通过模块（如mod_jk）与 Java 应用服务器（如 Tomcat）通信，用于处理 Java Web 应用（如 JSP、Spring Boot 应用）。mod_jk模块通过 AJP 协议将请求转发给 Tomcat，由 Tomcat 处理 Java 代码。
                本质区别：Java 是编程语言，其 Web 应用需要运行在独立的应用服务器（如 Tomcat、Jetty）中，Apache 仅作为前端服务器转发请求，不直接执行 Java 代码。
       
            Apache 在 Linux 发行版的命名区别:
                ————————————————————————————————————————————————————————————————————————————————
                发行版	            Apache服务名称	     主程序名	    配置文件路径
                ————————————————————————————————————————————————————————————————————————————————
                Ubuntu/Debian	    apache2	            apache2	      /etc/apache2/apache2.conf
                ————————————————————————————————————————————————————————————————————————————————
                CentOS/RHEL	        httpd	            httpd	      /etc/httpd/conf/httpd.conf
                ————————————————————————————————————————————————————————————————————————————————
                Fedora	            httpd	            httpd	      上
                ————————————————————————————————————————————————————————————————————————————————


        wordpress与discuz 都需要连接数据库
		    WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站
		    Discuz是一个开源论坛程序，通过该程序可以搭建、论坛。


=====================================================================journalctl===================================================================


journalctl 是非常强大的日志管理工具 ，本身就带有丰富的过滤日志功能。CentOS 7 以后利用 Systemd 统一管理所有 Unit 的启动日志。带来的好处就是可以只用 journalctl 一个命令查看所有日志(内核日志和应用日志).

    journalctl			        # 直接运行 journalctl 命令，会把系统中所有日志信息全都显示出来
	journalctl -k               # 查看内核日志（不显示应用日志）
	journalctl -b -0            # 查看系统本次启动的日志, 等价 journalctl -b
	journalctl -b -1            # 查看上一次启动的日志（需更改设置）
	journalctl --since="2017-10-30 18:10:30"						# 开始的时间
	journalctl --since "20 min ago"
	journalctl --since yesterday
	journalctl --since "2017-01-10" --until "2017-01-11 03:00"		# 日期区间
	journalctl --since 09:00 --until "1 hour ago"					# 从9点开始的前一个小时，也就是9点到10点的日志
	
	journalctl -n                               # 显示尾部的最新10行日志
	journalctl -n 20        	                # 显示尾部指定行数的日志
	journalctl -f                               # 实时滚动显示最新日志
	journalctl /usr/lib/systemd/systemd         # 查看指定服务的日志
	journalctl _PID=1                           # 查看指定进程的日志
	journalctl /usr/bin/bash                    # 查看某个路径的脚本的日志    
	journalctl _UID=33 --since today            # 查看指定用户的日志
	journalctl -u nginx.service                 # 查看某个 Unit 的日志，就是查看某个应用的日志
	journalctl -u nginx.service --since today
	
	journalctl -u nginx.service -f                                  # 实时滚动显示某个 Unit 的最新日志
	journalctl -u nginx.service -u php-fpm.service --since today    # 合并显示多个 Unit 的日志
	journalctl -p err -b		    # 查看指定优先级（及其以上级别）的日志，共有8级, 0: emerg , 1: alert , 2: crit , 3: err , 4: warning , 5: notice , 6: info , 7: debug
	journalctl --no-pager           # 日志默认分页输出，--no-pager 改为正常的标准输出
	
	#日志管理journalctl
	
	journalctl -b -u nginx.service -o json              # 以 JSON 格式（单行）输出
	journalctl -b -u nginx.serviceqq -o json-pretty     # 以 JSON 格式（多行）输出，可读性更好
	journalctl --disk-usage             # 显示日志占据的硬盘空间
	journalctl --vacuum-size=1G         # 指定日志文件占据的最大空间
	journalctl --vacuum-time=1years	    # 指定日志文件保存多久	    

    journalctl --path                           # 查看默认日志路径. --path 指定日志文件或目录(可直接指向 .journal 文件)。注意: --path 选项是在 systemd 230+ 版本中引入的功能
    journalctl --path /run/log/journal          # 查询指定目录的日志
    journalctl --path /backup/journal/ -u sshd.service      # 查询特定路径的 SSH 日志    
    journalctl --path /backup/journal/ --disk-usage         # 统计指定路径的日志大小
    journalctl --path /backup/journal/d435a2b1c3d4e5f6g7h8i9j0k1l2m3n4/system@00056789abcdef-000123456789ab.journal     # 查询单个日志文件(只能用 --path, --director 不支持)
    journalctl --path /var/log/journal/ --path /backup/old-journal/     # --path 支持多次使用以合并多个日志源（--directory 不支持）
    journalctl --directory /backup/journal/d435a2b1c3d4e5f6g7h8i9j0k1l2m3n4     # 指定日志目录(需包含 journal 文件，如 /var/log/journal/[机器ID])

        --path 和 --director 区别:
            --directory 必须指向 包含 journal 文件的目录（如 /var/log/journal/[机器ID]）。优先使用 --directory：在所有系统版本中通用，适合查询整个日志目录。    
            --path 可指向 目录 或 单个 .journal 文件。仅新版本可用 --path：功能更灵活，支持直接指定文件或多路径合并，但需 systemd 230+。


补充: journalctl 是 Linux 系统中用于查询和管理 systemd 日志的工具，其日志数据主要来源于 systemd-journald 服务维护的日志文件

    journalctl 收集的日志涵盖系统中多种组件和服务的输出，主要来源包括：
        1. systemd 服务
            所有通过 systemd 启动的服务（如 nginx、httpd、sshd 等）的标准输出（stdout）和标准错误（stderr）会被直接捕获。例如：systemctl start nginx 后，Nginx 的启动日志会自动写入 journald。
            服务的日志配置中若未指定其他输出方式，默认会流向 journald。
        2. 内核日志（kmsg）
            内核通过 klogd 或 systemd-journald 输出的消息，包括硬件驱动加载、系统错误、内存状态等。可通过 journalctl -k 单独查询内核日志。
        3. 应用程序的 journald 接口
            支持 libsystemd-journal 库的应用程序，可直接通过 API（如 journal_log()）向 journald 发送日志。例如：部分 C/C++ 程序可通过该接口将自定义日志写入 journald。
        4. 传统日志的转发
            通过配置 systemd-journal-remote 或 journal-upload，可将其他日志系统（如 rsyslog）的日志转发至 journald。例如，rsyslog 可通过 imjournal 模块将日志写入 journald。
                vim /etc/rsyslog.conf
                module(load="imjournal")
                input(type="imjournal" SrcPath="/var/log/journal")
        5. 用户会话日志
            用户登录（如 ssh 登录）、系统启动 / 关机、硬件插拔等事件日志。
            会话日志按用户 UID 存储在 user-UID.journal 中（UID 为用户 ID，如 user-1000.journal），可通过 journalctl --user 查询用户相关日志。

    日志数据的格式与结构：
        journald 日志以 二进制格式 存储（而非文本文件），包含以下关键信息：
            元数据：时间戳、进程 ID、用户 ID、主机名等。
            日志级别：DEBUG、INFO、WARNING、ERROR、FATAL 等。
            日志内容：应用程序输出的具体信息。
        二进制格式的优势：
            结构化查询：可通过字段快速过滤（如 _PID=1234），如 _PID=1234、SYSLOG_IDENTIFIER=nginx），查询效率高于文本日志。
            压缩与索引：二进制格式支持压缩存储和快速索引，适合海量日志场景。

    与其他日志系统的关系：
        与 rsyslog 的区别
            rsyslog 是传统日志系统，以文本文件形式存储（如 /var/log/messages）。
            journald 是 systemd 内置的日志系统，更适合现代 Linux 系统，支持结构化查询。
        共存与集成
            许多系统同时运行 rsyslog 和 systemd-journald：
                rsyslog 可读取 journald 日志并转发至文本文件（如 /var/log/journal.log）。
                通过配置 rsyslog.conf 中的 imjournal 模块实现集成。

    存储路径：
        内存临时存储(运行时): /run/log/journal/[机器ID]/
            仅在系统运行时存在，重启后清空。
            存储当前会话的日志，避免频繁写入磁盘影响性能。
        磁盘持久化存储: /var/log/journal/[机器ID]/
            日志永久保存(除非达到配置的存储空间上限)。需手动创建目录以及初始化。
                mkdir -p /var/log/journal
                systemd-tmpfiles --create --prefix /var/log/journal
                chown -R systemd-journal:systemd-journal /var/log/journal
            配置存储限制（/etc/systemd/journald.conf）
                [Journal]
                Storage=persistent       # 持久化存储到磁盘
                SystemMaxUse=2G          # 最大占用空间
                SystemMaxFileSize=512M   # 单文件最大大小
        
    示例文件结构：
        /var/log/journal/
        └─ d435a2b1c3d4e5f6g7h8i9j0k1l2m3n4/                # 机器 ID
        ├─ system.journal                                   # 当前系统服务日志
        ├─ user-0.journal                                   # root 用户日志
        ├─ user-1000.journal                                # UID=1000 的用户会话日志(普通用户日志) 
        ├─ system@00056789abcdef-000123456789ab.journal     # 历史日志块，也就是历史日志归档（按时间滚动）
        └─ ...     

    总结：
        journalctl 的日志数据由 systemd-journald 统一收集，来源包括系统服务、内核、应用程序接口等，存储于内存和磁盘的二进制文件中。
        这种结构化存储方式使得日志查询更高效，是现代 Linux 系统（如 CentOS 7+、Ubuntu 16.04+）的标准日志管理方案。


======================================================================logrotate===================================================================


日志转储(也称为日志滚动)就是对日志做一些约定，比如把旧的日志文件删除，并创建新的日志文件。可以预防日志占满整个硬盘空间(比如nginx和Apache的访问日志)，有以下方案:
    写计划任务，删除超过一定时间的日志
    系统中自带 logrotate 服务管理日志，可以自动做日志转储

logrotate是一个日志文件管理工具，可以根据日志文件的大小，也以根据其天数来日志转储，这个过程一般通过 cron 程序来执行。logrotate有如下功能:
    (1)每隔一个时间周期或满足了其它限制条件，就生成一个新的空日志文件用来保存新生成的文件，旧的日志文件会被重命名(在原文件名上加序号或时间后缀)保存！
    (2)可以根据定义的规则自动删除过期的日志文件！
    (3)因为历史日志文件的后缀都是序号或时间戳为后缀，所以可以很方便进行过滤、筛选


logrotate 

    rpm -qi logrotate                           # 系统自带

    rpm -ql logrotate
	/etc/cron.daily/logrotate					# logrotate 实现基于计划任务，"/etc/cron.daily/"目录下的计划任务会每天运行一次
	/etc/logrotate.conf                         # 配置文件         
	/etc/logrotate.d
	/etc/rwtab.d/logrotate
	/usr/sbin/logrotate							# logrotate 程序，可以自动做日志转储
    /var/lib/logrotate/logrotate.status         # 日志文件
	......

    cat /etc/cron.daily/logrotate               # 可以看到 logrotate 程序本身被计划任务调用
    usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf


    sudo cat /etc/cron.daily/logrotate          # logrotate 程序被计划任务调用
    #!/bin/sh
    /usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf      # logrotate 会根据"logrotate.conf"文件定义的规则对日志做转储
    EXITVALUE=$?
    if [ $EXITVALUE != 0 ]; then
        /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
    fi
    exit 0


    sudo cat /etc/logrotate.conf                # 定义了日志转储的规则
    # see "man logrotate" for details
    # rotate log files weekly
    weekly                                      # 表示每周做一次日志的滚动(转储)，也就是每周会生成一个新日志文件，新日志文件的文件名和原来一样
    # keep 4 weeks worth of backlogs
    rotate 4                                    # 表示保证最近4个版本，其余更早的日志文件会被删除
    # create new (empty) log files after rotating old ones
    create                                      # 表示旧日志滚动之后，会生成一个空的新日志文件，用来存放新日志
    # use date as a suffix of the rotated file
    dateext                                     # 表示旧日志的文件名会添加时间后缀，如果没有配置此项，后缀默认为数字序号    
    # uncomment this if you want your log files compressed
    #compress
    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d                    # 针对每个服务可以单独指定日志转储规则。上面都是全局性配置(也就是说只要没有特殊约定，都按照上面的规则)。
    # no packages own wtmp and btmp -- we'll rotate them here
    /var/log/wtmp {
        monthly
        create 0664 root utmp
        minsize 1M
        rotate 1
    }
    /var/log/btmp {
        missingok
        monthly
        create 0600 root utmp
        rotate 1
    }
    # system-specific logs may be also be configured here.


    ls  /etc/logrotate.d/           # 每个服务想实现自己的日志转储需要单独创建一个配置文件放在此目录下。服务自己配置文件的参数会覆盖"/etc/logrotate.conf"文件中的参数
	bootlog  btmp  chrony  nginx  psacct  syslog  yum

    cat /etc/logrotate.d/btmp       # btmp 就是 "/var/log/btmp" 日志文件的转储规则，没有定义的规则参数，就继承"/etc/logrotate.conf"文件中的配置参数, 如果logrotate.conf中没有就使用logrotate的默认参数
	# no packages own btmp -- we'll rotate them here
	/var/log/btmp {					# "/var/log/btmp"是转储的目标文件.  
		missingok					# "missingok"表示，如果"/var/log/btmp"这个文件丢了，不会影响当前的日志记录，也不会报严重的错误
		monthly						# 一个月转储一次
		create 0600 root utmp		# 转储后创建的新文件权限，以及所有者和所属组
		rotate 1					# 保留最后一个版本
	}	


logrotate 配置规则

    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    配置参数				|	说明
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————	
    compress				|	通过gzip压缩转储以后的日志
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nocompress				|	不压缩
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    copytruncate			|	用于还在打开中的日志文件，把当前日志备份并截断
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nocopytruncate			|	备份日志文件但是不截断
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    create mode owner group	|	转储文件，使用指定的权限，所有者，所属组创建新的日志文件
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nocreate				|	不建立新的日志文件
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    delaycompress			|	和 compress 一起使用时，转储的日志文件到下一次转储时才压缩
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nodelaycompress			|	覆盖 delaycompress 选项，转储同时压缩
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    errors address			|	专储时的错误信息发送到指定的Email 地址
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    ifempty					|	即使是空文件也转储，此为默认选项
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    notifempty				|	如果是空文件的话，不转储
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    mail address			|	把转储的日志文件发送到指定的E-mail 地址
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nomail					|	转储时不发送日志文件
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    olddir directory		|	转储后的日志文件放入指定目录，必须和当前日志文件在同一个文件系统
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    noolddir				|	转储后的日志文件和当前日志文件放在同一个目录下
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    prerotate/endscript		|	在转储以前需要执行的命令，这两个关键字必须单独成行
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    postrotate/endscript	|	在转储以后需要执行的命令，这两个关键字必须单独成行
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    daily					|	指定转储周期为每天
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    weekly					|	指定转储周期为每周
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    monthly					|	指定转储周期为每月
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    hourly					|	定转储周期为每小时
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    rotate count			|	指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    tabooext [+] list		|	让logrotate不转储指定扩展名的文件，缺省的扩展名是：.rpm-orig, .rpmsave, v, 和 ~
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    size size				|	当日志文件到达指定的大小时才转储，bytes(缺省)及KB或MB
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
                            |	默认，对每个转储日志运行prerotate和postrotate脚本，日志文件的绝对路径作为第一个参数传递给脚本。 
    sharedscripts			|	这意味着单个脚本可以针对与多个文件匹配的日志文件条目多次运行（例如/ var / log / news /*.example）。
                            |    如果指定此项sharedscripts，则无论有多少个日志与通配符模式匹配，脚本都只会运行一次
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nosharedscripts			|	针对每一个转储的日志文件，都执行一次prerotate 和 postrotate脚本，此为默认值	
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    missingok				|	如果日志不存在，不提示错误，继续处理下一个
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    nomissingok				|	如果日志不存在，提示错误，此为默认值
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

示例：设置nginx的日志转储规则
    cat /etc/logrotate.d/nginx
    
    /var/log/nginx/*.log {			# 对"/var/log/nginx/"目录下所有以".log"结尾的日志文件做转储
        daily
        rotate 100
        missingok
        notifempty					# 如果是空文件的话，不转储
        nocompress					# 不压缩，但压缩后占用的空间少一些
        delaycompress				# 延迟压缩, 第一次转储的时候不压缩，第一次之后的转储就开始压缩
        create 644 ngnix nginx		# 生成的新日志文件的权限为644，文件所有者为ngnix, 所属组为ngnix
        postrotate					# 在转储以后需要执行的命令，相当于命令开始标记。nginx 日志转储存在一个问题，当新的空日志文件生成后，它仍然会把日志往旧的日志文件中写入
            if [ -f /apps/nginx/logs/nginx.pid ]; then		# "nginx.pid"保存的是nginx进程的进程编号，如果这个文件存在才运行下面的命令
                kill -USR1 `cat /app/nginx/logs/nginx.pid`  # "USR1" 是nginx自定义信号，表示重新打开日志文件，当发送USR1信号给nginx，nginx就会打开新的日志文件，并将日志写到新日志文件
            fi
        endscript					# 命令结束标记
    }

    nginx -h			
	man nginx
    ......省略
    SIGUSR1          Reopen log files.							# nginx自定义的 USR1 信号，使用时可以省略"SIG"
    SIGUSR2          Upgrade the nginx executable on the fly.	# nginx自定义的 USR2 信号，使用时可以省略"SIG"
    ......省略
    
    说明:
        nginx的日志转储不能直接将日志写到新的日志文件中的原因是 Linux根据文件路径最终拿到的是文件描述符，文件在使用过程中虽然改名，但是不影响文件的描述符。
        需要在 nginx.conf 中配置 "pid /apps/nginx/logs/nginx.pid" 后参会生成 nginx.pid 文件


示例：对指定日志手动执行日志转储

	dd if=/dev/zero of=/var/log/test1.log bs=2M count=1	        # 生成测试日志
	dd if=/dev/zero of=/var/log/test2.log bs=2M count=1

    cat /etc/logrotate.d/test1         
	/var/log/test1.log {
		daily											# 每天转储
		rotate 5
		compress
		delaycompress									# 延迟压缩
		missingok
		size 1M											# 当日志大小满1M时转储。注意：这里转储有两个条件，只要满足其中一个条件就开始转储
		notifempty
		create 640 bin nobody
		postrotate
			echo `date +%F_%T` >> /data/test1.log		# 将日志转储的时间记录到指定的文件中，这样就可以看到转储记录
		endscript
	}
	
	cat /etc/logrotate.d/test2
	/var/log/test2.log {
		daily												
		rotate 5
		compress
		delaycompress
		missingok
		size 1M							
		notifempty
		create 644 root root
		postrotate
			echo `date +%F_%T` >> /data/test2.log
		endscript
	}	
	
	logrotate /etc/logrotate.d/test1        # 针对一个测试日志，手动执行日志转储，也就是手工触发日志转储，如果日志满足了转储条件，就会马上转储
	
	ll /var/log/test*      # 因为是针对的某一个配置触发，所以不会继承总配置文件中的参数，这个配置也没有自己定义历史日志文件的文件名后缀，所以默认以数字序号为后缀
	-rw-r----- 1 root root 0       Nov 12 14:00 /var/log/test1.log
	-rw-r--r-- 1 root root 2097152 Nov 12 13:59 /var/log/test1.log.1	# 以数字序号为后缀。因为定义了延迟压缩，所以下一次转储后的文件名为 test1.log.2.gz	
	-rw-r--r-- 1 root root 2097152 Nov 12 13:59 /var/log/test2.log	
	
    cat /data/test1.log			
	2019-11-12_14:00:14             # 记录了转储的时间
	
	
	// 对所有日志进行手动转储，也就是手动触发总配置文件，子配置文件会继承总配置文件的参数, 所以即使子配置文件没有定义转储日志文件的文件名的后缀形式，也会从总配置文件继承
	logrotate /etc/logrotate.conf		# 总配置文件会调用子配置文件(子配置文件必须在指定的目录下)，所以能够实现 test1.log 和 test2.log 的日志转储		
	ll /var/log/test*
	-rw-r--r-- 1 bin nobody 0      Nov 12 14:00 /var/log/test1.log				# 因为"test1.log"不满足转储条件，所以即使触发总配置文件，也不会转储
	-rw-r--r-- 1 root root 2097152 Nov 12 13:59 /var/log/test1.log.1
	-rw-r--r-- 1 root root 0       Nov 12 14:01 /var/log/test2.log
	-rw-r--r-- 1 root root 2097152 Nov 12 13:59 /var/log/test2.log-20191112		# 因为总配置文件定义了加时间格式，所以历史日志的文件名后缀为日期 
	
	说明：
		虽然定义了日志大小达到 1M 就转储，但是仍然是一天只检查一次，因为计划任务是每天运行一次，主要取决于任务计划的运行周期！
		每天运行一次的计划任务，一般是半夜两点到四点之间运行计划任务，时间并不固定，由系统自动调度！
		工作中需要做日志定时转储，不用写脚本，直接写子配置文件，然后放在指定的目录下就能实现！

