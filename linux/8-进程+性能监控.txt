========================================================================进程====================================================================

进程ID（Process ID，PID）被用来标记各个进程, UID、GID、和SELinux语境决定对文件系统的存取和访问权限
    init：第一个进程，从 CentOS7 以后为 systemd ( /sbin/init -> ../lib/systemd/systemd ). 
    进程：都由其父进程创建，fork(). CoW(Copy On Write 写时复制):数据没更新父进程和子进程就共用一块内存,如果数据变化了,就会copy出父进程的空间，然后子进程指向这个空间！
    cpu 运行的进程不是固定的，进程在哪个cpu上运行也不是固定的。是根据操作系统来调度的

Page Frame(页框): 用来存储页面数据，一个page为4k。也就是说，进程在内存中占用的大小，是以4k为单位进行分配。page是给进程分配内存空间的单位!!
    getconf -a | grep -i size       # 查看page大小

MMU(Memory Management Unit)：负责虚拟地址转换为物理地址，MMU是cpu里面的一块芯片，是个硬件！

PROCESS STATE CODES         # man ps , 然后搜索 /PROCESS STATE CODES（按 / 键后输入）
    Here are the different values that the s, stat and state output specifiers (header "STAT" or"S") will display to describe the state of a process:

            D    uninterruptible sleep (usually IO). 不可中断的睡眠,不消耗CPU,不可终止,例如 磁盘/NFS 故障(危险！)
            R    running or runnable (on run queue). 运行/就绪,	消耗CPU/内存,可终止,例如计算任务
            S    interruptible sleep (waiting for an event to complete).可中断的睡眠,不消耗CPU,可终止,例如 等待 I/O (最常见状态)
            T    stopped by job control signal. 暂停态,不消耗 CPU,可终止,例如人工暂停（Ctrl+Z）
            t    stopped by debugger during the tracing.跟踪暂停,不消耗CPU,可终止,调试器断点
            W    paging (not valid since the 2.6.xx kernel)
            X    dead (should never be seen). 死亡,进程完全终止,资源已被系统回收,瞬时状态,通常不可见(仅在 ps 结果中瞬间出现)
            Z    defunct ("zombie") process, terminated but not reaped by its parent. 僵尸,不消耗资源,需父进程回收,进程终止但未被回收
                    特点: 进程已终止，但未被父进程回收资源;仍占用进程表项（PID），但实际不消耗 CPU/内存;少量僵尸无害，但数量增长需警惕。
                    产生原因: 父进程未调用 wait() 或 waitpid() 获取子进程退出状态。
                    清理方法：终止父进程(僵尸由 init 进程接管并回收);修复父进程代码逻辑。

    For BSD formats and when the stat keyword is used, additional characters may be displayed:

            <    high-priority (not nice to other users)
            N    low-priority (nice to other users)
            L    has pages locked into memory (for real-time and custom IO)
            s    is a session leader
            l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
            +    is in the foreground process group

    程序状态的一些切换方法:
        "Ctrl + z" 使进程进入停止态，相当于命令"kill -19 进程PID"
        "kill -18 进程PID" 恢复一个进程
        "ctrl +c"结束一个进程, 相当于命令"kill -9 进程PID"。	
        "ctrl+d"不是发送信号，而是表示一个特殊的二进制值，表示 EOF。(EOF是一个计算机术语 End Of File 的缩写),通常在文本的最后存在此字符表示资料结束


释放内存: Least Recently Used 近期最少使用算法(喜新厌旧).

IPC(Inter Process Communication) 进程间通信
 	
    同一主机：
		pipe 管道,单向传输.  分为 匿名管道 和 命名管道文件.匿名管道就是"|"; 使用 mkfifo 可以创建一个管道文件就是 命名管道文件
		socket 套接字文件,双工通信
		Memory-maped file 文件映射,将文件中的一段数据映射到物理内存，多个进程共享这片内存。就是把把文件的内容放到内存中！！
		shm shared memory 共享内存
		signal 信号
		Lock 对资源上锁，如果资源已被某进程锁住，则其它进程想修改甚至读取这些资源，都将被阻塞，直到锁被打开。一旦枷锁就不能并行运行，性能会降低
		semaphore 信号量，一种计数器。实现进程之间的信号控制
	
	不同主机：socket=IP和端口号
		RPC remote procedure call
		MQ 消息队列，生产者和消费者，如：Kafka，RabbitMQ，ActiveMQ   


进程优先级：优先级越高，CPU会优先分配，最终表现为进程运行的快些.数字越小，优先级越高.
    0-99		实时进程，一些特殊的系统进程的优先级在0-99这个范围
    100-139		非实时进程，大部分进程的优先级在100-139这个范围       
    
    不同的命令显示的优先级数字范围和"0~139"这个范围不一定是一致的.
        nice 这个命令，设置的优先级范围是"-20 ~ 19", 对应系统优先级"100-139". 默认进程启动用的优先级是nice的0，相当于系统优先级的120
        top命令显示的"0-39"之间的优先级，如果是实时优先级就不显示了，就只显示RT(realtime),RT就是实时优先级的意思！
        只有根用户才能降低nice值(提高优先性)

        nice -n -10 ping www.baidu.com			# 指定ping命令以nice为10的优先级运行, nice 命令可以动态设置某一个进程的实时优先级
        sudo renice -n 5 3994	                # renice 可以改变正在运行的进程的优先级.如果指定的优先级超出范围，会自动设置为最靠近的那个最大或最小值优先级
        ps axo pid,comm,ni                      # 看nice进程优先级, nice 也可以缩写为ni

    CPU会优先运行优先级较高的进程：原理是使用队列实现, 系统中各有140个运行队列和过期队列 !!  


进程分类
	
	操作系统分类：
		协作式多任务：：早期 windows 系统使用，即一个任务得到了 CPU 时间，除非它自己放弃使用CPU ，否则将完全霸占 CPU。缺点是如果占用CPU的这个进程挂掉了，就会导致死机！！
		抢占式多任务：Linux内核，CPU的总控制权在操作系统手中，操作系统会轮流询问每一个任务是否需要使用 CPU 
		
	进程类型：
		守护进程: daemon,在系统引导过程中启动的进程，和终端无关进程
		前台进程：跟终端相关，通过终端启动的进程
		注意： 守护进程和前台进程两者可相互转化
		
	按进程资源使用的分类：
		CPU-Bound：CPU 密集型，非交互
		IO-Bound：IO 密集型，交互


(了解)调度算法: 内核的功能,极少数场景下要针对业务做优化要改算法，一般默认算法就已经够用！在LINUX 2.6中有四种关于IO的调度算法:
    NOOP(No Operation):该算法实现了最简单的FIFO队列，所有IO请求大致按照先来后到的顺序进行操作。
    CFQ(Completely Fair Queuing):该算法的特点是按照IO请求的地址进行排序，而不是按照先来后到的顺序来进行响应。
    Deadline scheduler:DEADLINE在CFQ的基础上，解决了IO请求饿死的极端情况。
    Anticipatory scheduler:ANTICIPATORY的在DEADLINE的基础上，为每个读IO都设置了6ms 的等待时间窗口。如果在这6ms内OS收到了相邻位置的读IO请求，就可以立即满足   


=====================================================================进程相关工具================================================================

cat /proc/$pid/status           # proc目录下有很多以进程编号命名的目录.status文件就是进程的相关信息,可使用cat查看

pstree              # 查看进程和线程. 没有{}包裹的是进程,括号中是进程号(pid); 有{}包裹是线程,括号中是线程的pid. Linux中线程本质是轻量级进程(LWP),因此线程也有独立PID(实际是TID) 
    pstree -p       # -p 显示pid或tid. 
    pstree -pH pid  # -H 高亮显示指定进程及其前辈进程


ps              # 查看进程状态的命令行工具(默认只显示本终端开启的进程). 分为 BSD风格(选项无"-", 适合快速查看用户和资源) 和 unix 风格(有"-", 适合追踪 进程关系和系统级信息)                
    ps aux      # a 显示所有与终端关联的进程(包括其他用户的); u 以用户导向格式显示(包含详细的用户、CPU、内存信息); x 显示所有不与终端关联的进程(包括守护进程,systemd、crond 等无终端的进程)
    ps auxw     # w 加宽输出宽度(可叠加为 ww，显示完整命令行), 完整显示所有进程的命令行参数,不截断
    ps aux  k -%cpu     # k 表示排序, - 表示倒叙排. -%cpu 表示以CPU的指标为标准倒叙排

    ps -ef              # 显示所有进程,包括无终端的守护进程. -e 等价于 -A ; -f 显示完整格式信息(包含 UID、PPID、C、STIME 等)
    ps -eflH            # -l 显示长格式信息(包含 F、S、PRI、NI 等进程标志); -H	以层级格式显示进程树(父进程下显示子进程)
    ps -efL --forest    # -L 显示线程(LWP/NLWP 列), --fores 显示进程树

    -o 或 o      # 自定义输出格式
        ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
        ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm

    ps -p <PID>         # 查看指定PID的进程, 示例 ps -p 1234
    ps -C <命令名>	    # 按进程名筛选, 示例 ps -C nginx
    ps -u <用户>	    # 显示指定用户的进程, 示例 ps -fu root
    ps --ppid <PPID>	# 显示指定父进程的子进程, 示例 ps --ppid 1
    ps -t <终端>	    # 显示指定终端的进程, 示例 ps -t pts/0
    ps --forest	        # 树形显示进程层级, 示例 ps -e --forest

    "ps aux"输出属性解释： 
        VSZ：虚拟内存空间，操作系统承诺分配给进程的空间
        RSS：物理内存空间，进程实际占用的空间
        TTY：进程在哪个终端运行，"?"表示和终端无关的进程
        START：进程开始运行的时间
        TIME：cpu分给进程的时间片之和。
        STAT：进程的状态
            D    不可中断的睡眠,不消耗CPU,不可终止,例如 磁盘/NFS 故障(危险！)
            R    运行/就绪,	消耗CPU/内存,可终止,例如计算任务
            S    可中断的睡眠,不消耗CPU,可终止,例如 等待 I/O (最常见状态)
            T    暂停态,不消耗 CPU,可终止,例如人工暂停（Ctrl+Z）
            t    跟踪暂停,不消耗CPU,可终止,调试器断点
            W    paging (not valid since the 2.6.xx kernel)
            X    死亡,进程完全终止,资源已被系统回收,瞬时状态,通常不可见(仅在 ps 结果中瞬间出现)
            Z    僵尸,不消耗资源,需父进程回收,进程终止但未被回收
            <    高优先级
            N    低优先级
            L    内存分页并带锁
            s    session leader，会话（子进程）发起者
            l    is multi-threaded,多线程进程
            +    位于前台的进程组

    "ps -ef" 输出属性解释：
        ppid：当前进程的父进程
        c：cpu的利用率，凑整显示
        STIME：进程启动时间
        TIME：cpu分给进程的时间片之和

    范例: 找到未知进程的执行程序文件路径
        ps aux  k -%cpu             #  ps命令找到未知进程的PID
        ll -l  /proc/${pid}/exe     #  查看实际的程序文件路径.是病毒删除后还会自动生成, 正解是删后建一个一样的空文件,再赋予这个文件特殊权限来避免被覆盖,再找出自动生成病毒文件的根进程其删除 


(了解)pidof                         # 适用于知道进程名，获取进程编号
    pidof -x test2.sh               # -x 按脚本名称查找 pid
    pidof dd                        # 获取dd这个进程的PID
    ll /proc/`pidof dd`/exe         # 如果"pidof dd"过滤出来的结果有多个就不能这样用


pgrep                   # 专门的进程过滤工具          
    -u uid              # effective user，生效者
    -U uid              # real user，真正发起运行命令者
    -t terminal         # 与指定终端相关的进程
    -l                  # 显示进程名
    -a                  # 显示完整格式的进程名
    -P pid              # 显示指定进程的子进程  

    pgrep -at pts/1     # -a 显示完整格式的进程名, -t 以终端过滤. 不能写为 -ta
    pgrep -P $pid       # 显示指定进程的子进程
    pgrep -a '^p'       # 支持正则表达式


taskset                         # 临时指定进程和CPU进行绑定,重启进程这个关系解除. 避免切换CPU会带来额外的开销，因为CPU里面有一些高速缓存数据

prtstat                         # 查看进程信息 
    prtstat  $pid
    prtstat -r 1                # -r 以 raw 格式显示


top                     # 动态实时显示进程运行的当前状态
    选项：
        -d # 	        # 指定刷新时间间隔，默认为3秒
        -b 		        # 全部显示所有进程
        -n # 	        # 刷新多少次后退出
        -H 		        # 线程模式
    结果属性解释：
        PR              # 是top命令的优先级
        NI              # nice优先级
        VIRT            # 虚拟内存空间
        RES             # 实际物理内存占用的空间
        SHR             # 共享内存
        S               # 进程状态
        %CPU            # cpu利用率
        %MEM            # 内存占用
        TIME            # 总的运行时间
	排序：
        top默认按照CPU的使用率排序
        输入 P：以占据的CPU百分比,%CPU
        输入 M：占据内存百分比,%MEM
        输入 T：累积占据CPU时长,TIME+
    首部信息显示：
        uptime信息：l命令，输入l打开，再输入l关闭
        tasks及cpu信息：t命令，输入t可以切换风格显示，输入一次t就切换一次
        cpu分别显示：1 (数字)，如果是多核多线程，输入1会切换为分别显示，再次输入1又切换为汇种显示
        memory信息：m命令，切换显示风格以及隐藏和显示
    其它命令
        退出命令：q键
        修改刷新时间间隔：s键
        终止指定进程：k键
        保存文件：W键

    top -H -p `pidof mysqld`        # -p 指定 pid, -H 线程模式

(了解)htop            # 增强版的TOP命令，来自EPEL源，比top功能更强，显示也更花哨


lsof                    # (ist open files)查看进程打开的文件.linux中一切皆文件，用户通过文件可以访问常规数据，网络连接套接字(socket)和硬件等,系统在后台会为应用程序分配一个文件描述符
    选项：
        -a              # 列出打开文件存在的进程
        -c<进程名>      # 列出指定进程所打开的文件
        -g              # 列出GID号进程详情
        -d<文件号>      # 列出占用该文件号的进程
        +d<目录>        # 列出目录下被打开的文件
        +D<目录>        # 递归列出目录下被打开的文件
        -n<目录>        # 列出使用NFS的文件
        -i<条件>        # 列出符合条件的进程(4、6、协议、:端口、 @ip )
        -p<进程号>      # 列出指定进程号所打开的文件
        -u              # 列出UID号进程详情
        -h              # 显示帮助信息
        -v              # 显示版本信息。
        -n              # 不反向解析网络名字
	
    lsof                            #  lsof 列出当前所有打开的文件
	lsof /var/log/messages          # 查看当前哪个进程正在使用此文件 

    实例:如果误删除正在被进程使用的文件，可以使用 lsof 命令找回
        tail -f /var/log/messages
        lsof | grep /var/log/messages	            # 可以看到这个文件正在被使用
        rm -f /var/log/messages                     # 删除文件
        lsof |grep /var/log/messages                # 找到使用此文件的进程的PID以及FD
        cat /proc/653/fd/6                          # 在进程目录中可以查看到文件内容
        cat /proc/653/fd/6 > /var/log/messages      # 在进程目录中可以查看到文件内容


jobs        # 查看依附于当前终端的所有前台和后台作业
fg          # 用于将后台运行的或挂起的任务(或作业)切换到前台运行，"fg 1"就是把作业编号为1的挂起的进程切换到前台运行
bg          # 恢复到后台。


kill                        # 用来向进程发送控制信号，以实现对进程管.每个信号对应一个数字，信号名称以SIG开头(可省略),不区分大小写
    man 7 signal            # 查看帮助
    kill -l                 # 显示当前系统可用信号
    trap -l                 # 查看所有信号, trap命令还可以用来捕获信号

	常用信号：
		1) SIGHUP 无须关闭进程而让其重读配置文件
		2) SIGINT 中止正在运行的进程；相当于Ctrl+c
		3) SIGQUIT 相当于ctrl+\
		9) SIGKILL 强制杀死正在运行的进程,可能会导致数据丢失,慎用!
		15) SIGTERM 终止正在运行的进程，默认信号
		18) SIGCONT 继续运行
		19) SIGSTOP 后台休眠		
	
	指定信号的方法 :
		信号的数字标识：1, 2, 9
		信号完整名称：SIGHUP，sighup
		信号的简写名称：HUP，hup

    向进程发送信号：
        按PID：
            kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
        按名称：killall 来自于psmisc包
            killall [-SIGNAL] comm…
        按模式：
            pkill [options] pattern
            常用选项：
                -SIGNAL
                -u uid             # effective user，生效者
                -U uid             # real user，真正发起运行命令者
                -t terminal        # 与指定终端相关的进程
                -l                 # 显示进程名（pgrep可用）
                -a                 # 显示完整格式的进程名（pgrep可用）
                -P pid             # 显示指定进程的子进程

    HUP信号(信号):
         killall -1 httpd       # 等价于 service httpd reload 
    
    0信号: 0信号不存在，但是在文档中有提到。0信号可以检查这个进程是否正常，在生产中可以用来做服务的健康检查
        kill -0 $pid
        killall -0 bash         
        echo $?                 # 服务正常返回0, 不正常返回非0

    自定义信号: SIGUSR1 和 SIGUSR2就是自定义信号，可以在程序中自定义SIGUSR1和SIGUSR2的功能
        man nginx       # 在nginx中，就自定义了SIGUSR1和SIGUSR2的功

    示例:
        kill $PID       # 默认发15信号，使用 kill 需要root权限
        kill -9 $PID    # 发送9信号到PID, PID是主进程的PID,非子进程的PID
        kill  1	        # kill pid为1的进程, init进程表面杀不死，但会引起未知问题。比如init下面有很多子进程，有些进程删除后自动再开启.但杀掉init进程后，杀掉这些进程不再会自动开启,centos6上表现的很明显 

        killall -9 bash     # 要杀掉所有bash进程，使用kill要运行两遍，这时可以使用killall,根据进程名杀掉进程. 杀掉后终端自动退出

        pkill -u xiaohong       # 结束某个用户的进程
        pkill -9 -u xiaohong    # 强制结束
        pkill '^p'              # 支持正则表达式

    示例: 将运行中的进程放在后台
        ping 192.168.32.2       # ping 成功后按下 ctrl+Z，注意："ctrl+Z"把进程放到后台，并且程序状态变为stop
        ps aux | grep ping      # 可以看到这里的状态是T
        jobs                    # 查看当前终端所有作业,获取作业编号
        bg 1					# 将前台停止态恢复为后台运行态,也可以发18信号.这时候按"Ctrl+Z"不能暂停进程.也不能使用"ctrl+c"结束进程,因为进程在后台运行. "kill -18 %1" 和 "bg 1"是一样的效果
        kill -19 %1             # 将后台运行态变为后台停止，发 19 信号(虽然此时终端不断有输出,还是可以输入命令然后运行)。格式：kill -19 %作业编号     
        jobs
        kill -18 %1			    # 等价于 bg 1
        fg 1                    # 将后台运行恢复为前台运行(虽然此时终端不断有输出,还是可以输入命令然后运行),然后可以使用"ctrl+c" 结束进程

	示例: 后台运行的命令按"Ctrl+C"不能结束，因为"Ctrl+C"是给当前前台运行的进程发信号 
	    ping www.baidu.com &              # 运行后虽然在不停打印，还是可以输入命令运行，如果被打印覆盖了输入的命令，就继续输，输完按回车，一样能运行
	    killall -2 ping                   # 如果结束？在当前终端或新开一个终端使用kill发信号

=====================================================================性能相关工具================================================================

uptime                          # 负载查询,如下是运行结果解析. w 命令的第一行就是uptime命令的结果. top 命令的前几行也是显示的这些信息.
    14:22:44： 这个时间是当前时间，就是运行 uptime 这个命令的时间
    14 min： 系统已启动的时间,也就是系统运行了多长时间
    2 users：当前上线人数
    "load average: 0.00, 0.01, 0.03", 表示 系统平均负载（1、5、15分钟的平均负载，一般不会超过1，超过5时建议警报）.
        系统平均负载:指在特定时间间隔内运行队列中的平均进程数,通常每个CPU内核的当前活动进程数不大于3，那么系统的性能良好。
        如果每个CPU内核的任务数大于5，那么此主机的性能有严重问题 ！如：linux主机是1个双核CPU，当Load Average 为6的时候说明机器已经被充分使用	

free            # 内存空间， 如果应用有像内存泄露、溢出的问题时，从swap的使用情况是可以比较快速判断的，但通过执行free 反而比较难查看.
	选项：
		-b      # 以字节为单位
		-m      # 以MB为单位
		-g      # 以GB为单位
		-h      # 易读格式
		-o      # 不显示-/+buffers/cache行
		-t      # 显示RAM + swap的总和
		-s n    # 刷新间隔为n秒
		-c n    # 刷新n次后即退出

mpstat                  # 显示CPU相关统计 
    yum install -y sysstat
    mpstat
    mpstat 1 3          # 每1秒观察一次,连续观察三次

    结果属性解释：
        %usr 表示用户空间占的百分比
        %sys 表示系统内核
        %irq 表示中断
        %soft 表示软中断
        %steal 表示被盗取的时间，指的是虚拟化，被虚拟机运行进程占用的时间
        %guest 和虚拟化有关
        %gnice 虚拟机调整优先级
        %idle 空闲

pmap                # 进程对应的内存映射,"/proc/$pid/maps"也可查看.有助观察进程是否出现内存异常，比如内存溢出、不足等现象	
    pmap -x $pid    # -x 显示详细格式的信息

strace              # (了解)跟踪系统调用，跟踪某个命令的运行过程，了解底层工作的具体细节
    yum -y install strace
    strace ls

ltrace              # 跟踪某个程序运行过程中的库调用关系
    yum -y install ltrace
    ltrace ls

vmstat              # 虚拟内存信息
    vmstat -s       # 显示内存的统计数据
    vmstat 1 3      # 每秒运行，运行三次   
    
    显示属性说明：
		procs:
			r：可运行（正运行或等待运行）进程的个数，和核心数有关
			b：处于不可中断睡眠态的进程个数(被阻塞的队列的长度)
		memory：
			swpd: 交换内存的使用总量
			free：空闲物理内存总量
			buffer：用于buffer的内存总量
			cache：用于cache的内存总量
		swap:
			si：从磁盘交换进内存的数据速率(kb/s)
			so：从内存交换至磁盘的数据速率(kb/s)
		io：
			bi：从块设备读入数据到系统的速率(kb/s)
			bo: 保存数据至块设备的速率
		system：
			in: interrupts 中断速率，包括时钟
			cs: context switch 进程切换速率
		cpu：
			us:Time spent running non-kernel code
			sy: Time spent running kernel code
			id: Time spent idle. Linux 2.5.41前,包括IO-wait time.
			wa: Time spent waiting for IO. 2.5.41前，包括in idle.
			st: Time stolen from a virtual machine. 2.6.11前, unknown.		
	
		注意： swap 和 io 的读写都是以内存为参照物，比如一个文件读到内存中，对内存来说是in，对磁盘来说是out，因为是以内存为参照物，所以内存的读，对应的是bi的增长

iostat          # 统计CPU和设备IO信息，iostat 可以提供更丰富的IO性能状态数据，此工具由sysstat包提供
    选项：	
        -c      # 只显示CPU行
        -d      # 显示设备〈磁盘)使用状态
        -k      # 以千字节为为单位显示输出
        -t      # 在输出中包括时间戳
        -x      # 在输出中包括扩展的磁盘指标   

    显示属性说明：
        tps：该设备每秒的传输次数."一次传输"意思是"一次I/O请求"。多个逻辑请求可能会被合并为"一次I/O请求"。"一次传输"请求的大小是未知的。
        kB_read/s：每秒从设备（drive expressed）读取的数据量；
        kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；
        kB_read：读取的总数据量；
        kB_wrtn：写入的总数量数据量；这些单位都为Kilobytes

    iostat 1 3              # 每秒运行一次，连续观察三次
    iostat -d sda 1 3 -x   # -d 指定磁盘，-x 在输出中包括扩展的磁盘指标    

iotop                       # 监视磁盘I/O，来自于iotop包, 与top相似的UI，其中包括PID、用户、I/O、进程等相关信息，可查看每个进程是如何使用IO   

iftop                       # 显示网络带宽使用情况, 通过EPEL源的 iftop 包
    yum -y install iftop
    iftop -ni eth           # -n 以数字方式显示, -i 指定网卡 

nload                       # 查看网络实时吞吐，实时监控网络流量和带宽使用情况, 以数值和动态图展示进出的流量情况,通过EPEL源安装
ptraf-ng                    # 网络监视工具，功能强大，画面花哨
dstat                       # 系统资源统计
glances                     # 综合监控工具，此工具可以通过EPEL源安装,CentOS 8 目前没有提供(已提供,但测试问题)
webmin                      # 综合管理平台 
cockpit                     # 管理平台 

=======================================================================作业管理==================================================================

Linux的作业控制
    前台作业：通过终端启动，且启动后一直占据终端。大部分进程都是前台运行！比如ping是默认前台运行！
    后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）。比如bash是默认后台运行!

让作业运行于后台
    运行中的作业： Ctrl+z
    尚未启动的作业： COMMAND &

后台作业虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系
    nohup COMMAND &>/dev/null &
    screen；COMMAND
    tmux；COMMAND

并行运行方法:
    方法1：
        cat all.sh
        f1.sh&
        f2.sh&
        f3.sh&
    方法2：
        (f1.sh&);(f2.sh&);(f3.sh&)
    方法3：
        f1.sh&f2.sh&f3.sh&
    
多组命令实现并行示例:
    { ping -c3 127.1; ping 127.2; }& { ping -c3 127.3 ;ping 127.4;}&        # "{ }"里面的命令表示当成一组命令; "{ }&" 表示这一组命令放在后台运行

示例：探测一个网段中有多少主机可以访问
    cat checkhost.sh
    #!/bin/bash
    net=192.168.32
    for i in {1..254};do
            {
                    ping -c1 -W1 $net.$i &> /dev/null && echo $net.$i is up || echo $net.$i is down
            }&
    done
    wait            # "wait"表示所有命令后台运行完成后就退出来。如果不加"wait"不会主动退出，运行完成后，需要按下回车键才会退出