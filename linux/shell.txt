=======================================================================shell=====================================================================

#!/bin/bash						#首行She-bang机制

curl "https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh" | bash
curl -s "https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"  			# -s 隐藏下载过程

wget -O - "https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh" | bash

bash -n -x tcpx.sh			# 开子shell运行脚本. -n 检查语法, -x 调试脚本(跟踪脚本运行过程) 
sh tcpx.sh					# 同上
./tcpx.sh					# 同上	

source tcpx.sh				# 在当前shell运行脚本
. tcpx.sh					# 同上

==============================内置变量+普通变量==============================

内置变量，如：PS1，PATH，UID，HOSTNAME，$$，BASHPID，PPID，$?，HISTSIZE
用户自定义变量，不管什么类型，默认全部是字符串. 变量名区分大小写，不能数字开头. 支持字母、数字、下划线

ab=`whoami`
unset ab

echo ${title}_$name     # 如果不加{},会把"title_"当成一个变量

dcmd='ls -al'			# 实现动态命令
$dcmd

nums=`seq 10`
echo $nums				# 一行显示
echo "$nums"			# 加双引号，保留原格式，10行显示
echo '$nums'			# 加单引号, $失去变量的功能，只是普通的字符

title=cto
title+=ceo				# 追加字符串

set 					# 显示所有变量

注意事项：
	name=linux				# 普通变量
	local name=linux		# local 关键字必须在函数体内部, 其作用范围也仅限于函数体内部
	export name=linux		# 环境变量，能够让变量给子进程使用

==================================环境变量===================================

环境变量(了解),用的不多,通常都是在shell环境种用,在脚本种很少用，环境变量主要是配置shell环境,也就是交互式运行命令用:
	可以使子进程（包括孙子进程）继承父进程的变量，但是无法让父进程使用子进程的变量
	一旦子进程修改从父进程继承的变量，会将新的值传递给孙子进程
	一般只在系统配置文件中使用，在脚本中较少使用

echo $BASHPID			# 用户登录后,实际上在一个shell中，查看shell进程编号

pstree -p				# 查看进程之间的关系， 运行一个命令, 实质上就是在当前shell中开启一个子进程， 比如运行 "bash"


name=opc
bash					# 开启子进程
echo $name				# 这里name无值,说明普通变量的有效范围在当前shell,对子进程无效


name=opc
export opc				# 将普通变量提升为环境变量
bash
echo $name				# 打印出name值，说明父进程的变量可以传递给子进程

export name=opc			# 声明环境变量, 也可使用 declare -x name=opc

export					# 查看环境变量. env、printenv、declare -x , 这三个命令也可查看环境变量.  env 等价于 printenv，export 等价于 declare -x 
	
unset					# 可删除环境变量

cat /proc/$进程编号/environ		# 查看进程的环境变量


==================================只读变量===================================

readonly name=opc		# 也可以使用 declare -r name=opc 定义
	
readonly				# 列出当前 shell 环境中所有用户定义的只读变量，输出格式简洁，适合快速查看. 等价于 declare -r
readonly -p				# 列出所有只读变量(包括用户定义和系统内置),包含系统内置只读变量(如 BASHOPTS, BASHPID 等)

unset name				# 不能使用 unset 删除一个只读变量.  可以 exit 退出，然后再login，变量就会失效


bash --version
eclare +r PI   			# 移除只读标志，Bash 4.4+ 可以通过这个方式移除只读变量
unset PI       			# 成功删除
echo $PI       			# 空

==================================位置变量===================================

$1, $2, ... 		对应第1个、第2个等参数，脚本中 $10 要写为 ${10}, 否则会被解释为 $1 和 0 , ${10}以上都要加{}.
$0 					命令本身,包括路径
$# 					传递给脚本的参数的个数
$* 					传递给脚本的所有参数，全部参数合为一个字符串(了解)
$@ 					传递给脚本的所有参数，每个参数为独立字符串(了解)

$@ 和 $* 只在被双引号包起来的时候才会有差异(了解)

set --				清空所有位置变量(了解)


==================================状态变量===================================

$?的值为0 			#表示前一个命令运行成功
$?的值是1到255 		#表示前一个命令运行失败


exit [n]			#可以在脚本中使用以下命令自定义退出状态码, 比如 exit 100	
exit 100			#通过 $? 取出的状态码就是100


脚本中一旦遇到exit命令，脚本会立即终止；终止退出状态取决于exit命令后面的数字
如果exit后面无数字,终止退出状态取决于exit命令前面命令执行结果
如果没有exit命令, 即未给脚本指定退出状态码，整个脚本的退出状态码取决于脚本中执行的最后一条命令的状态码


==================================展开命令===================================

各种符号处理的优先级:
	把命令行分成单个命令词
	展开别名
	展开大括号的声明{}
	展开波浪符声明 ~
	命令替换$() 和 ``
	再次把命令行分成命令词
	展开文件通配*、?、[abc]等等
	准备I/0重导向 <、>
	运行命令

防止扩展
	反斜线 \ 会使随后的字符按原意解释	
	单引号（’’）防止所有扩展
	双引号（""）也可防止扩展，但是以下情况例外：$变量


==================================set命令====================================

set 命令实现脚本安全
	-u 在扩展一个没有设置的变量时，显示错误信息， 等同 set -o nounset
	-e 如果一个命令返回一个非0退出状态值(失败)就退出， 等同 set -o errexit
	-o option 显示，打开或者关闭选项
		显示选项：set -o
		打开选项：set -o 选项
		关闭选项：set +o 选项
	-x 当执行命令时，打印命令及其参数,类似 bash -x

	
#!/bin/bash
set -e			#在工作中,脚本都要加上 -e 和 -u 参数!!! (重要)
set -u



(了解) set 命令可以用来定制 shell 环境
	[opc@docker-halo ~]$ echo $-  			# - 变量记录当前设置的shell选项，himBH是默认值
	imBH									# imBH每个字母代表特定的含义，比如 B 代表支持{}, set +B 关闭花括号功能，set -B 则打开
	
==================================提示信息===================================

echo		# 不能格式化输出
printf		# 可以格式化输出，可以使显示的界面更加漂亮. echo 的所有功能 printf 都支持, 比如打印出字体颜色


printf '%s\n' 1 2 3    		# 需要自己加换行符

printf '(%s)' 1 2 3			# 给数字加上括号 


==================================算术运算===================================

注意：bash 只支持整数，不支持小数

实现算术运算：
	(1) let var=算术表达式   			 # 掌握, 等价 ((var=算术表达式))
	(2) var=$[算术表达式]				 # 掌握		
			echo $[RANDOM%100+1]
	(3) var=$((算术表达式))				 # 掌握	 	
	(4) var=$(expr arg1 arg2 arg3 ...)
			expr $x \* $y
	(5) declare -i var = 数值
		declare声明变量：https://www.cnblogs.com/gltou/p/15095801.html
	(6) echo '算术表达式' | bc			# bc支持小数
		echo $x*$y | bc

help let


==================================逻辑运算===================================

&	与, 一假则假,全真才真
|	或, 一真则真,全假才假
！  非(取反)
^	异或，相同为假，不同为真    (基本不用)
	1 ^ 0 = 1
	1 ^ 1 = 0
	
&&
||
	第一个CMD1结果为真 (1)，总的结果必定为1，因此不需要执行CMD2
	第一个CMD1结果为假 (0)，第二个CMD2 必须要参与运算,才能得到最终的结果



================================条件测试命令=================================

条件测试命令，EXPRESSION前后必须有空白字符，也就是说 [] 前后一定有空格
	test EXPRESSION
	[ EXPRESSION ] 			# 和test 等价，建议使用 [ ]
	[[ EXPRESSION ]] 		# 相当于增强版的 [ ], 支持[]的用法,且支持扩展正则表达式和通配符(这里不是匹配文件名，用来匹配字符串)

[ EXPRESSION ]
    File operators:
      -a FILE        True if file exists.(取反结果不对，建议使用 -e )
	  -e FILE        True if file exists.
	  -d FILE        True if file is a directory.
	  -f FILE        True if file exists and is a regular file.
      -r FILE        True if file is readable by you.
	  -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.

      FILE1 -nt FILE2  True if file1 is newer than file2 (according to modification date).
      FILE1 -ot FILE2  True if file1 is older than file2.
      FILE1 -ef FILE2  True if file1 is a hard link to file2.

    String operators:
      -z STRING      True if string is empty.  变量不存在或变量的值为空，-z 都会判断为空
      -n STRING
         STRING      True if string is not empty. 判断可以不写 -n , 直接写字符串

      STRING1 = STRING2
                     True if the strings are equal.   注意比较有空格，没有空格相当于赋值 . 这里是比较字符串
      STRING1 != STRING2
                     True if the strings are not equal.
      STRING1 < STRING2
                     True if STRING1 sorts before STRING2 lexicographically.
      STRING1 > STRING2
                     True if STRING1 sorts after STRING2 lexicographically.

    Other operators:

      -o OPTION      	True if the shell option OPTION is enabled.
      -v VAR    	 	True if the shell variable VAR is set
      ! EXPR         	True if expr is false.
      EXPR1 -a EXPR2 	True if both expr1 AND expr2 are true.
      EXPR1 -o EXPR2 	True if either expr1 OR expr2 is true.

      arg1 OP arg2   Arithmetic tests.  OP is one of -eq, -ne, -lt, -le, -gt, or -ge. 这里比较数字
	
	
	
条件命令两种结果:
	若真，状态码变量 $?为0
	若假，状态码变量 $?为1


实例:

	type test
	type [
	type [[

	help test
	help test
	
	CMD1 && CMD2 || CMD3		# CMD1成功 -> CMD2运行 —> CMD3不运行;  CMD1失败 -> CMD3运行; 
	CMD1 || CMD2 && CMD3		# CMD1成功 ——> CMD2不运行 -> CMD3运行;  CMD1不成功 -> CMD2运行 -> CMD3运行; 工作中不这样写，因为CMD3始终会运行 

	[ `whoami` = 'opc' -a ! -e ./testDir  ] && mkdir ./testDir || echo 'testDir is exists'    			# -a 把两个判断表达式连在一起，都运行成功才是true 
	[ \( `whoami` = 'opc' \) -a \( ! -e ./testDir \) ] && mkdir ./testDir || echo 'testDir is exists'   # 加括号可以使表达式更清晰
	
	[ $a = $b ] && echo equal || echo not equal		     # 如果$a有值, $b不存在或空值,会报语法错误,给变量加双引号可防止语法错误. [[ ]] 无此问题,但最好加引号养成习惯
		b=							# 什么值都不给，会报语法错误
		b=""						# 给空值也会报语法错误
		不声明b变量					# 也会报语法错误
	
	[ "$a" = "$b" ] && echo equal || echo not equal	     # 加上双引号,即使$b不存在或空值,也有空字符串占位,而不会出现语法错误
	

[[ EXPRESSION ]]
	( EXPRESSION )		Returns the value of EXPRESSION
    ! EXPRESSION		True if EXPRESSION is false; else false
    EXPR1 && EXPR2		True if both EXPR1 and EXPR2 are true; else false
    EXPR1 || EXPR2		True if either EXPR1 or EXPR2 is true; else false
	
	== 或 !=			# 判断字符串是否相等,  == 号的右边作为通配符
	=~					# 判断字符串相等, =~ 号的右边作为扩展正则表达式
	
	如果EXPR1足以确定表达式的值，则&&和||运算符不会计算EXPR2	

实例:
	[[ $file == *.sh ]] && echo true || echo false
	[[ "$file" == *.sh ]] && echo true || echo false
	
	[[ "$file" =~ .*\.sh$ ]] && echo true || echo false


===================================()和{}====================================

( list ) 会开启子shell,并且list中变量赋值及内部命令执行后,将不再影响后续的环境 
	查看帮助:
		man bash
		/\(list\)
		
{ list; } 不会启子shell, 在当前shell中运行,会影响当前shell环境
	查看参看
		man bash 
		/{ list; }

实例:
	name=oracle;( name=opc;echo $name );echo $name		# 第一个name打印出opc,第二个name打印出 oracle 
	( cd /data/dir/; rm -rf * )		# 当这个命令运行完后,还是在原目录, 因为()不改变外部shell环境,在脚本中临时做些事情就可以用 ()

	
扩展:
	dir 有文件, dirlink 是 dir 的软连接.
		rm -rf  dirlink/				# 软连接和dir都没删，dir 下的目录已清空
		rm -rf  dirlink					# 软连接删了，dir和dir下的问价你还在
	

==================================read命令===================================

read从标准输入中读取值，给每个单词分配一个变量，所有剩余单词都被分配给最后一个变量，如果没有指定变量名，默认赋值给系统内置变量 REPLY

read 可以用来在脚本中实现交互性操作

read [options] [name ...]
	-p 			指定提示信息
	-t N 		N秒内没输入就退出
	-s 			静默输入，一般用于密码
	-n N 		指定输入的字符长度N
	-d '字符' 	输入结束符
	



read name age weight   	# 输入 zhangsan 28 60 80
echo $name				# zhangsan
echo $age				# 28	
echo $weight			# 60 80	

read -p "pls input your name: " name
echo $name

read -d c name          # 当有c字符输入就退出，只支持字符, 不支持输入单词


============================bash shell 配置文件==============================

所有用户皆有效
	/etc/profile
	/etc/profile.d/*.sh
	/etc/bashr
	
特定用户有效
	~/.bash_profile
	~/.bashrc

交互式登录:
	两种方式:
		直接通过终端输入账号密码登录
		使用 su - UserName 切换的用户
	
	通过终端登录 或 使用"su - UserName"切换将运行的配置文件(配置文件的生效顺序从上到下,实际是文件调用文件的顺序): 
		/etc/profile
		/etc/profile.d/*. sh
		/etc/bashrc					# rc=run command
		~/.bash_profile
		~/.bashrc
		/etc/bashrc

非交互式登录(了解)
	四种方式:
		su UserName
		图形界面下打开的终端
		执行脚本
		任何其它的bash实例
	
	非交互式登录涉及到的配置文件有(配置文件的生效顺序从上到下):
		/etc/profile.d/*.sh
		/etc/bashrc
		~/.bashr

profile类 和 bashrc类 理论上任何linux命令都可以往里面放. 
	
	Profile类: profile类为交互式登录的shell提供配置
		全局：
			/etc/profile
			/etc/profile.d/*.sh
		个人：
			~/.bash_profile
		用途：
			一般放环境变量，以及运行命令或脚本
			
	bashrc类：为非交互式和交互式登录的shell提供配置			
		全局：
			/etc/bashrc
		个人：
			~/.bashrc
		用途：
			一般定义命令别名和函数, 以及 定义本地变量
			
	人为规定，并非强制		
			
		
修改profile和bashrc文件后需生效两种方法:
	重新启动shell进程,比如退出shell重新登录
	source 或 . 配置文件， souce 等价 .
		source
		. ~/.bashrc
	
	注意: source 会在当前shell中执行脚本, 所有一般只用于执行置文件,或在脚本中调用另一个脚本的场景
	
	
用户退出bash会触发"~/.bash_logout"运行. 可以实现 创建自动备份、清除临时文件 等功能.


==================================流程运算===================================

if 判断; then
	...
elif 判断; then
	...
elif 判断; then
	...
else
	...
fi	


case 变量引用 in
PAT1)
	分支1
	;;
PAT2)
	分支2
	;;
*)
	默认分支
	;;
esac

case的PAT支持glob风格的通配符：
	* 		任意长度任意字符
	? 		任意单个字符
	[] 		指定范围内的任意单个字符
	| 		或者，如: a|b



for循环：有局限性
	
	CentOS7的for帮助比CentOS8全面, CentOS7 的帮助上面提到了for循环的格式2的写法
		help for

	格式1：
	
		for NAME [in WORDS ... ] ; do COMMANDS; done
		

		for 变量名 in 列表;do
			循环体
		done
		
	
		for 变量名  in 列表
		do
			循环体
		done
	
	格式2：双小括号方法，即((…))格式，也可以用于算术运算，双小括号方法也可以使 bash Shell 实现C语言风格的变量操作 I=10;((I++))
		
		for ((: for (( exp1; exp2; exp3 )); do COMMANDS; done
		
		for ((控制变量初始化;条件判断表达式;控制变量的修正表达式))
		do
			循环体
		done

	实例；
		for i; do								#  If `in WORDS ...;' is not present, then `in "$@"' is assumed
		
		for i in 1 2 3;do echo i=$i;done
		
		n=5; for i in `seq $n`;do echo i=$i;done
		
		for i in {1..5};do echo i=$i;done		# 不支持 "n=5; {1..$n}" 这种写法，可以使用 echo {1..$n} 看到结果
		
		for i in *.sh;do echo i=$i;done			# 支持通配符
		
		for i in /home/opc/*.sh;do echo i=$i;done
		
		sum=0; for ((i=0;i<=100;i++))
		
		for ((sum=0,i=1;i<=100;i++))
		

while 循环: 更通用,可代替for,更简洁
	格式
		while COMMANDS; do COMMANDS; done			# 无限循环写法   while true; true
		
		while CONDITION; do							# 无限循环写法   while : ; true
			循环体
		done


until 循环 (了解,用的很少)
	格式: 
		until COMMANDS; do COMMANDS; done
	
		until CONDITION; do							# CONDITION 为false就循环, 为true退出循环, 和 while 相反
			循环体
		done
	
	实例:
		until false; do COMMANDS; done				# 无线循环


循环控制语句 
	continue， continue [N]：提前结束第N层的本轮循环，而直接进入下一轮判断；最内层为第1层
	break，break [N]：提前结束第N层整个循环，最内层为第1层
	shift 命令
		shift [n] 用于将参量列表 list 左移指定次数，缺省为左移一次。
		参量列表 list 一旦被移动，最左端的那个参数就从列表中删除。while 循环遍历位置参量列表时，常用到 shift

	实例:
		while [ "$1" ]; do				# 判断$1是否为空
			其它逻辑
			shift
		done

	
while 特殊用法 while read, 遍历文件或文本的每一行(非常重要)
	格式:
		while read line; do
			循环体
		done < /PATH/FROM/SOMEFILE		# 可以逐行处理
	
	实例:
		while read line; do echo $line; done < /etc/issue

		cat /etc/issue | while read line; do echo $line; done 
	
循环与菜单 select
	格式:	
		select NAME [in WORDS ... ;] do COMMANDS; done
			
		select variable in list ;do 
			循环体命令
		done
	
	实例：
		PS3="请选择功能(1-6)";select MENU in 优化SSH 禁用SELinux 关闭防火墙 修改网卡 设置PS1 重启; do 
			case $REPLY in
			1)
				echo $MENU
				;;
			2)
				echo $MENU
				;;
			*)
				echo $MENU
				;;	
			esac				
		done
	
		
	说明：
		1. select 循环主要用于创建菜单，按数字顺序排列的菜单项显示在标准错误上，并显示 PS3 提示符，等待用户输入
		2. 用户输入菜单列表中的某个数字，执行相应的命令
		3. 用户输入被保存在内置变量 REPLY 中
		4. select 是个无限循环，因此要用 break 命令退出循环，或用 exit 命令终止脚本。也可以按 ctrl+c 退出循环
		5. select 经常和 case 联合使用
		6. 与 for 循环类似，可以省略 in list，此时使用位置参量
	
	
====================================函数=====================================

三种语法:
	func_name () {
		...函数体...
	}
	
	function func_name {
		...函数体...
	}
	
	function func_name () {
		...函数体...
	}


入门
	getInfo(){ hostname;uname -r;}				# { 后面要有空格
	getInfo										# 命令行定义函数，命令行中调用

	declare -F									# 查看系统内置函数, 只显示函数名, 加上函数名表示指定查看某个函数		
	declare -f									# 显示内涵函数的函数体, 也可跟函数名指定查看
	unset func_name								# 删除某个函数


范例: install_httpd.sh										# -n 检查脚本的语法, bash -n install_httpd.sh
	#!/bin/bash
	os_type(){
		if grep -i -q ubuntu /etc/os-release;then
			echo ubuntu										# echo 打印的值相当于函数的返回值
		elif grep -i -q centos /etc/os-release;then
			echo centos
		else
			echo "OS can't be supported!"
		fi
	}

	if [ `os_type` = centos ];then
		echo "install httpd for centos"!
		# yum install httpd -y
	elif [ `os_type` = ubuntu ];then
		echo "install httpd for ubuntu"!
		# yum install httpd -y
	fi


范例: 定义一个函数文件,名为 functions

	RED="echo -e \E[1;31m"
	GREEN="echo -e \E[1;32m"
	END="\E[0m"

	os_type(){
		if grep -i -q ubuntu /etc/os-release;then
			echo ubuntu
		elif grep -i -q centos /etc/os-release;then
			echo centos
		else
			echo "OS can't be supported!"
		fi
	}

	#变量不要定义在函数中，因为只有显示调用这个函数，变量才会生效
	#color() {
	#	RED="echo -e \E[1;31m"
	#	GREEN="echo -e \E[1;32m"
	#	END="\E[0m"
	#}

	is_ip(){
		[[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] || { echo "$1 is not valid ip!"; return 1; }			# return 的值可以用来做逻辑判断 
	}

bash -n functions
. functions				# 导入函数到shell环境中
os_type					# 命令行调用, 其它脚本调用, 只需要 ". functions" 写在脚本中, 要写在被调用的位置之前, 让其先运行 
${RED}测试红色${END}	 # 测试变量(导入到shell环境中后,变量相当于全局变量)


范例: 实现 centos6 打印 [ok] 的功能
	color () {
		RES_COL=60
		MOVE_TO_COL="echo -en \\033[${RES_COL}G"
		SETCOLOR_SUCCESS="echo -en \\033[1;32m"
		SETCOLOR_FAILURE="echo -en \\033[1;31m"
		SETCOLOR_WARNING="echo -en \\033[1;33m"
		SETCOLOR_NORMAL="echo -en \E[0m"
		echo -n "$1" && $MOVE_TO_COL
		echo -n "["
		if [ $2 = "success" -o $2 = "0" ] ;then
			${SETCOLOR_SUCCESS}
			echo -n $"  OK  "    
		elif [ $2 = "failure" -o $2 = "1"  ] ;then 
			${SETCOLOR_FAILURE}
			echo -n $"FAILED"
		else
			${SETCOLOR_WARNING}
			echo -n $"WARNING"
		fi
		${SETCOLOR_NORMAL}
		echo -n "]"
		echo 
	}

	[ $# -eq 0 ] && echo "Usage: `basename $0` {success|failure|warning}"

	color  $1 $2

. color.sh 安装成功 0


函数递归: 
	func () { echo $i;echo "run func";let i++; func; }


==================================local变量==================================

name=linux						
func(){ local name=windows; }	# 如果不加local关键字, name=linux 会被改变为 windows, local 关键字必须在函数体内部用
func							# 命令行中定义并调用函数
echo $name  

==================================信号捕捉===================================		

trap: 捕获信号


trap -l				# 列出所有信号
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX


"CTRL + C" 其实就是发出了"2)"这个信号，这个信号的作用是中断程序运行
"CTRL + \" 其实就是发出了"3)"这个信号


trap 命令可以捕捉信号,修改信号原来的功能,实现自定义功能
	trap '触发指令' 信号					# 进程收到系统发出的指定信号后，将执行自定义指令，而不会执行原操作
		trap '触发指令'  SIGINT     		# 写全称
		trap '触发指令'  INT      			# 所有信号的前缀都是"SIG",可以取消前缀
		trap '触发指令'  2			 		# 写信号的代表数字
	trap '' 信号							# 忽略信号的操作
	trap '-' 信号							# 恢复原信号的操作
	trap -p									# 列出自定义信号操作
	trap finish EXIT						# 当脚本退出时，执行finish函数, 脚本如果不能正常退出,可以使用这个功能
	
范例:
	#!/bin/bash
	trap "echo 'Press ctrl+c or ctrl+\ '" int quit  	# 捕获 int quit 信号, 捕获到后运行"echo 'Press ctrl+c or ctrl+\ "
	trap -p
	for((i=0;i<=10;i++))		# 在0-10秒按下"CTRL + C"触发int信号, 按下 "CTRL + \" 触发quit信号
	do
		sleep 1
		echo $i
	done
	
	trap '' int				   # 捕获到 int 信号什么也不做 
	trap -p
	for((i=11;i<=20;i++))	 
	do
		sleep 1
		echo $i
	done
	
	trap '-' int				# 恢复原信号的操作 
	trap -p
	for((i=21;i<=30;i++))
	do
		sleep 1
		echo $i
	done


范例:
	#!/bin/bash
	finish(){			# finish 函数中可以放一些关键代码、清理垃圾、清理临时文件等操作
		echo finish is at `date +%F_%T` | tee -a /root/finish.log	
	}
	
	trap finish exit	# 如果脚本没有正常完成(比如运行过程中按下"CTRL + C", 或关掉终端等各种情况),在退出时自动调用 finish 函数
	
	while true ;do
		echo running
		sleep 1
	done	


==================================mktemp====================================

写脚本可能需要创建临时文件或文件夹,使用 mktemp 可以避免和现有文件或文件夹冲突.

格式:
	mktemp [OPTION]... [TEMPLATE]	# TEMPLATE 是文件或文件夹名称,名称至少要有3个连续大写的XXX,多少个X就会有多少个随机数, 从而减少同名的几率
	
	选项：
		-d 						#创建临时目录
		-p DIR或--tmpdir=DIR 	#指明临时文件所存放目录位置


mktemp fileXXX
mktemp XXX								# XXX可以放在文件名的任意位置,甚至只写XXX也可
mktemp -d  /tmp/mmm/log_dir_XXXX		# mmm 文件夹存在, 创建成功, 不存在创建失败
mktemp -d  -p /tmp/mmm log_dir_XXXX		# 等价于上面的命令


范例: 实现垃圾箱
	cat /data/scripts/rm.sh
	#!/bin/bash
	DIR=`mktemp -d /tmp/trash-$(date +%F_%H-%M-%S)XXXXXX`
	mv $* $DIR
	echo $* is move to $DIR

	alias rm=/data/scripts/rm.sh	

==================================install====================================	

install 功能相当于cp，chmod，chown，chgrp ,mkdir 等相关工具的集合.
"make install"实际上就是调用的 install 

命令格式：		
	install [OPTION]... [-T] SOURCE DEST					#  -T treat DEST as a normal file
	install [OPTION]... SOURCE... DIRECTORY
	install [OPTION]... -t DIRECTORY SOURCE...				# -t copy all SOURCE arguments into DIRECTORY
	install [OPTION]... -d DIRECTORY...						# 创建空目录



	选项：
		-m MODE，默认755
		-o OWNER
		-g GROUP
		-d DIRNAME 目录

	install -m 700 -o root -g root srcfile desfile			# 拷贝文件
	install -m 770 -d /tmp/mmm/nnn							# 如果mmm文件夹不存在也会被创建

================================expect(重要)=================================
expect 
	是由Don Libes基于 TCL(Tool Command Language)语言开发, TCL语言的特点是: 模式-动作
	本身是交互式命令,可以读取键盘输入,监控屏幕上出现的字符，发现某个字符出,可以自动提交指定的字符串
	可以用命令行的方式, 也可以用交互式的方式.
	可以将交互过程如：ssh登录，ftp登录等写在脚本上使之自动化完成。尤其适用于需对多台服务器执行相同操作的环境中，可以大大提高工作效率。

yum -y install expect  		# 系统不带需安装,包含 expect、mkpasswd 等二进制文件
rpm -ql expect | head

语法:
	expect [选项] [ -c cmds ] [ [ -[f|b] ] cmdfile ] [ args ]
选项：
	-c				# 从命令行执行expect脚本，默认expect是交互地执行的
	-d				# 可以调试信息
常见命令:
	spawn		 	# 启动新的进程, 监控操作
	expect		 	# 从进程接收字符串
	send 		 	# 用于向进程发送字符串
	interact 	 	# 允许用户交互
	exp_continue 	# 匹配多个字符串, 在执行动作后加此命令


expect -c 'expect "\n" {send "pressed enter\n"}'	 # 非交互式, 监控换行符

[root@localhost ~]#expect
expect1.1> expect "hi" {send "You said hi\n"}		 # 交互式, 监控到屏幕上出现的内容只要包含 hi, 就打印出 You said hi

范例: 非交互式复制文件
	cat copy_file_script
	#!/usr/bin/expect										# expect算一个解释性语言, 所以这里要写它的 SHEBANG
	spawn scp /etc/redhat-release 192.168.32.101:/tmp		# spawn 后面就是跟要运行的命令	
expect {
		"yes/no" { send "yes\n";exp_continue }
		"password" { send "admin000\n" }
	}
	expect eof
	
chmod +x copy_file_scrip ; ./copy_file_script
	
范例: 自动登录
	cat auto_login_script
	#!/usr/bin/expect
	spawn ssh 192.168.32.101
	expect {
		"yes/no" { send "yes\n";exp_continue }
		"password" { send "admin000\n" }
	}
	interact										# 允许用户交互


范例: expect 变量
	cat test_variable
	#!/usr/bin/expect
	set ip 192.168.32.101							# expect 的脚本中用set设置变量，这里意思是将变量ip的值设置为"192.168.32.101"
	set user root
	set password admin000
	set timeout 10
	spawn ssh $user@$ip								# 使用 $ 引用变量
	expect {
		"yes/no" { send "yes\n";exp_continue }
		"password" { send "$password\n" }
	}
	interact

范例: 位置参数 + 执行多个命令
	cat test_create_user
	#!/usr/bin/expect
	set ip [lindex $argv 0]											# [lindex $argv 0] 表示第一个位置参数. 
	set user [lindex $argv 1]
	set password [lindex $argv 2]
	set timeout 10
	spawn ssh $user@$ip
	expect {
		"yes/no" { send "yes\n";exp_continue }
		"password" { send "$password\n" }
	}
	expect "]#" { send "useradd haha\n" }								# 登录成功后监控到屏幕出现"]#" 创建一个名为haha的用户
	expect "]#" { send "echo haha123 |passwd --stdin haha\n" }			# 给haha这个用户设置密码为"haha123"
	send "exit\n"														# 用于向进程发送字符串
	expect eof

chmod +x index_parameter ; ./index_parameter 192.168.32.101 root admin000

范例: shell脚本调用 expect
	cat expect.sh
	#!/bin/bash
	ip=$1
	user=$2
	password=$3
	expect <<EOF							# expect 支持标准输入, 所以可以使用多行重定向		
	set timeout 20							# 设置超时时间
	spawn ssh $user@$ip
	expect {
		"yes/no" { send "yes\n";exp_continue }
		"password" { send "$password\n" }
	}
	expect "]#" { send "useradd hehe\n" }
	expect "]#" { send "echo magedu |passwd --stdin hehe\n" }
	expect "]#" { send "exit\n" }
	expect eof
	EOF	

范例: 批量拷文件
	cat expect2.sh
	#!/bin/bash
	net=192.168.32
	user=root
	password=admin000

	for i in 100 101;do
		ip=$net.$i

		expect <<EOF
		set timeout 20
		spawn scp /etc/sysconfig/selinux $user@$ip:/tmp
		expect {
			"yes/no" { send "yes\n";exp_continue }
			"password" { send "$password\n" }
		}
		expect eof
		EOF
	done



===================================数组=====================================	

索引(下标):
	编号从0开始的索引,属于数值索引
	bash 4.0版本之后开始支持使用自定义的格式,而不仅是数值格式, 称为"关联索引" 
	bash的数组支持稀疏格式, 比如一个数组有三个元素, 删除第一个元素, 索引就变成了 0 2 3, 这称之为稀疏格式

声明数组
	declare -a ARRAY_NAME		# 普通数组可以不事先声明,直接使用。建议先声明后使用，这样shell脚本看起来条理很清楚
	declare -A ARRAY_NAME		# 关联数组必须先声明,再使用. 普通数组 和 关联数组 两者不可相互转换

数组赋值
	ARRAY_NAME[INDEX]=VALUE						# 一次只赋值一个元素
	ARRAY_NAME=("VAL1" "VAL2" "VAL3" ...)		# 次赋值全部元素, 例如 car=(BMW Benz Audi)
	ARRAY_NAME=([0]="VAL1" [3]="VAL2" ...)		# 只赋值特定元素
	read -a ARRAY								# 交互式对数组赋值

	示例
		file=(.sh)								# 支持通配符,把当前目录下的".sh"文件的文件名顶一个为一个数组

		declare -A score						# 关联数组相当于键值对
		score[xiaoming]=80
		score[zhangsan]=90
		echo ${score[xiaoming]}

显示数组
	declare -a					# 显示系统定义中的所有数组

查看数组的元素
	${ARRAY_NAME}[INDEX]		# 显示指定数组的下标对应的元素, 例如 echo ${BASH_VERSINFO[0]}
	${ARRAY_NAME[*]}			# 查看指定数组中的所有元素
	${ARRAY_NAME[@]}			# 查看指定数组中的所有元素
	${#ARRAY_NAME[*]}			# 查看指定数组的长度
	${#ARRAY_NAME[@]}			# 查看指定数组的长度

删除数组
	unset ARRAY[INDEX]			# 删除数组中的某元素，会导致稀疏格式
	unset ARRA					# 删除整个数

数组切片
	${ARRAY[@]:offset:number}			# 数组切片, offset 要跳过的元素个数, number 要取出的元素个数
	{ARRAY[@]:offset}					# 数组切片, 取偏移量之后的所有元素

向数组中追加元素：
	ARRAY[${#ARRAY[*]}]=value
	ARRAY[${#ARRAY[@]}]=value

范例：
	value=({0..9})	
	echo ${value[*]:3:4}			# 跳过前3个元素，取后面4个元素	
	echo ${value[*]:3}				# 跳过前3个元素，取后面所有元素
	value[${#value[*]}]=10			# 向数组追加元素, "${#value[*]}" 取元素个数
	echo ${value[@]}				# 对于一个连续的普通的数组来说，数组的个数 = 数组的最大下标 + 1，所以顺序追加一个元素的下标就是数组的个数
 
	unset value[3]					# 删除元素，数组变为"稀疏格式"
	unset value[5]
	echo ${value[10]}				# 删除数组元素，不影响原来数组的下标
	echo ${#value[*]}				# 删除数组元素，数组元素的长度会发生变化


=================================字符串切片==================================

基于偏移量取字符串
	${#var}					# 取字符串变量var的字符长度,一个汉字算一个字符
	${var:offset}			# 取字符串变量var中从第offset个字符(不包括第offset个字符)到最后的部分,offset的取值在 0 到 ${#var}-1 之间. bash4.2后允许为负值
	${var:offset:number}	# 返回字符串变量var中从第offset个字符(不包括第offset个字符)开始，长度为 number 的部分
	${var: -length}			# 取字符串的最右侧几个字符, 注意：冒号后必须有个空格
	${var:offset:-length}	# 从最左侧跳过offset字符，一直向右取到距离最右侧lengh个字符之前的内容. 即:掐头去尾
	${var: -length:-offset}	# 先从最右侧向左取到length个字符开始，再向右取到距离最右侧offset个字符之间的内容,注意：-length前有空格, 并且length必须大于offset

	实例：
		name=中华人民共和国
		echo ${#name}
		echo ${name:2}
		echo ${name:2:2}
	

基于模式取子串
	${var#*word}		# 删左留右, 从左一直向右删到word字符(包含word).懒惰模式,找到第一个就停了
	${var##*word}		# 贪婪模式, 删到最后一个word才停.
	${var%%word*}		# 从右边往左找，删右留左, 懒惰模式
	${var%%word*}		# 从右边往左找，删右留左, 贪婪模式
	
	实例:
		url=https://www.abc.com:8080/index.html
		echo ${url#*:}

查找替换	
	${var/pattern/substr}			# 查找var所表示的字符串中，第一次被pattern所匹配到的字符串，以substr替换之
	${var//pattern/substr}			# 查找var所表示的字符串中，所有能被pattern所匹配到的字符串，以substr替换之
	${var/#pattern/substr}			# 查找var所表示的字符串中，行首被pattern所匹配到的字符串，以substr替换之
	${var/%pattern/substr}			# 查找var所表示的字符串中，行尾被pattern所匹配到的字符串，以substr替换之

	实例:
		line='root:x:0:0:root:/root:/bin/bash'
		${line/root/admin}

查找并删除
	${var/pattern}					# 删除var表示的字符串中第一次被pattern匹配到的字符串
	${var//pattern}					# 删除var表示的字符串中所有被pattern匹配到的字符串
	${var/#pattern}					# 删除var表示的字符串中所有以pattern为行首匹配到的字符串
	${var/%pattern}					# 删除var所表示的字符串中所有以pattern为行尾所匹配到的字符串

	实例:
		line='root:x:0:0:root:/root:/bin/bash'
		${line/root}

字符大小写转换
	${var^^}					# 把var中的所有小写字母转换为大写
	${var,,}					# 把var中的所有大写字母转换为小写	

	实例:
		line='root:x:0:0:root:/root:/bin/bash'
		${line^^}
		${line2,,}

================================高级变量赋值=================================

---------------------------------------------------------------------------------------
变量配置方式			str 没有配置            str 为空字符串        str已配置非为空字符串
---------------------------------------------------------------------------------------
var=${str-expr}			var=expr				Var=					var=$str
---------------------------------------------------------------------------------------
var=${str:-expr}		var=expr				var=expr				var=$str
---------------------------------------------------------------------------------------
var=${str+-expr}		Var=					var=expr				var=expr
---------------------------------------------------------------------------------------
var=${str:+expr}		var=					var=					var=expr
---------------------------------------------------------------------------------------
var=${str=expr}			str=expr				str 不变				str 不变	
						var=expr				Var=					var=$str
---------------------------------------------------------------------------------------
var=${str:=expr}		str=expr				str=expr				str 不变		
						var=expr				var=expr				var=$str
---------------------------------------------------------------------------------------
var=${str?expr}			expr 输出至 stderr		 Var=					 var=$str
---------------------------------------------------------------------------------------
var=${str:?expr}		expr 输出至 stderr		 expr 输出至 stderr		  var=$str
---------------------------------------------------------------------------------------


实例:
	unset str
	var=${str:-linux}
	echo $var
	str='' var=${str:-linux} 			# str='' 为空字符串  
	echo $var
	str=' ' var=${str:-linux}
	echo $var
	str=windows var=${str:-linux};echo $var


============================高级变量-有类型变量==============================

Shell变量一般是无类型的，但是bash Shell提供了declare和typeset两个命令用于指定变量的类型，两个命令是等价的

declare [选项] 变量名

选项：
	-r 			声明或显示只读变量
	-i 			将变量定义为整型数
	-a 			将变量定义为数组
	-A 			将变量定义为关联数组
	-f 			显示已定义的所有函数名及其内容
	-F 			仅显示已定义的所有函数名
	-x 			声明或显示环境变量和函数,相当于export
	-l 			声明变量为小写字母 declare -l var=UPPER
	-u 			声明变量为大写字母 declare -u var=lower
	-n 			make NAME a reference to the variable named by its value

declare -l name=ROOT
echo $name

================================变量间接引用=================================

eval 命令(重点):
	
	n=10
	echo {1..$n}		# shell脚本只处理一次, 这里就是把 $n 替换为10, 不会再把 {1..10}展开, 当字符串处理
	eval echo {1..$n}	# 处理两次操作, 第一次是替换变量，第二次是运行命令. eval 后面必须是个命令
	
	i=a
	j=b
	eval $i$j=HaHa

	n=3; for i in `eval echo {1..$n}`;do echo $i ;done
	
间接变量引用(了解)
	variable1=variable2
	variable2=value

	实例:
		ceo=name				# ceo 存的是个另一个变量的名称
		name='is you'
		echo $name
		echo $$ceo

		eval echo '$'$ceo		# '$'使$无特殊含义,变为普通字符. 方式1取间接变量
		eval echo \$$ceo		# 转义$,使之变成普通字符,和上面的方式原理相同
		
		echo ${!ceo}			# 方式2 取间接变量

方式2取间接变量(使用declare新特性取间接变量)
	title=ceo
	ceo='is you'

	declare -n ref=$title					# 声明引用变量ref, -n 表示间接变量引用,"-n"在centos8上被支持！"help declare"查看是否支持该选项
	[ -R ref ] && echo "reference" 			# [ -R var ] 是bash4.4新特性, -R 在centos8上被支持！"help test"查看是否支持该选项
	
	echo $ref
	ceo=wang
	echo $ref
