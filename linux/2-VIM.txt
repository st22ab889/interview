=======================================================================VIM=======================================================================

命令模式 --> 插入模式
	i  insert, 在光标所在处输入
	I 在当前光标所在行的行首输入
	a append, 在光标所在处后面输入
	A 在当前光标所在行的行尾输入
	o 在当前光标所在行的下方打开一个新行
	O 在当前光标所在行的上方打开一个新行


范例(了解): 插入颜色字符 
	1 切换至插入模式
	2 按ctrl+v+[ 三个键,显示^[
	3 后续输入颜色信息,如:^[[32mhello^[[0m
	4 切换至扩展命令模式,保存退出
	5 cat 文件可以看到下面显示


================================扩展命令模式================================

扩展命令模式基本命令
	wq 				写入并退出
	x 				写入并退出
	X   			加密
	q 				退出
	q！ 			不存盘退出，即使更改都将丢失 
	r filename 		读文件内容到当前文件中
	w 				写（存）磁盘文件
	w   filename 	将当前文件内容写入另一个文件
	!command 		执行命令
	r!command 		读入命令的输出


地址定界格式	
	# 				#具体第#行，例如2表示第2行
	#,# 			#从左侧#表示起始行，到右侧#表示结尾行 
	#,+# 			#从左侧#表示的起始行，加上右侧#表示的行数，范例：2,+3 表示2到5行
	.   			#当前行
	$ 				#最后一行
	.,$-1 			#当前行到倒数第二行
	% 				#全文, 相当于1,$
	/pattern/   	#从当前行向下查找，直到匹配pattern的第一行,即:正则表达式
	/pat1/,/pat2/ 	#从第一次被pat1模式匹配到的行开始，一直到第一次被pat2匹配到的行结束
	#,/pat/     	#从指定行开始，一直找到第一个匹配pattern的行结束
	/pat/,$     	#向下找到第一个匹配patttern的行到整个文件的结尾的所有行	

地址定界后跟一个编辑命令
	d       #删除
	y 		#复制
	w file 	#将范围内的行另存至指定文件中
	r file 	#在指定位置插入指定文件中的所有内容
	.,$d    #删除当前行到最后一行


查找并替换：
	替换当前行：
		s/要查找的内容/替换为的内容/修饰符
	替换全文：
		%s/要查找的内容/替换为的内容/修饰符
	
	要查找的内容：可使用基本正则表达式模式
	替换为的内容：不能使用模式，但可以使用\1, \2, ...等后向引用符号；还可以使用“&”引用前面查找时查找到的整个内容
	修饰符：
		i 	#忽略大小写
		g 	#全局替换，默认情况下，每一行只替换第一次出现
		gc 	#全局替换，每次替换前询问
	分隔符/可替换为其它字符，如：#,@ ，可以避免对分隔符转义
		s@/etc@/var@g
		s#/boot#/#i
	
定制vim的工作特性(可放在配置文件，/etc/vimrc 全局, ~/.vimrc 个人)
	set nu		   		显示行号
	set nonu			取消显示行号
	set hlsearch		显示高亮搜索	
	set nohlsearch		取消高亮搜索
    set ic    			忽略字符的大小写 ，等价  set ignorecase
	set noic			不忽略字符的大小写
	set ai    			启用自动缩进，等价 set autoindent
	set noai			禁用动缩进	
	set paste
	set nopast
	set list				显示Tab ^I和换行符 和$显示
	set nolist          	不显示
	syntax on
	syntax off
	set fileformat=dos				启用windows格式,简写 set ff=dos
	set fileformat=unix				启用unix格式,简写 set ff=unix
	set expandtab    				启用Tab 用空格代替,  默认为8个空格代替Tab, 简写：set et
	set noexpandtab  				禁用
	set tabstop=#					Tab用指定空格的个数代替, 简写 set ts=# , 比如 set ts=4
	set shiftwidth=4				设置缩进为4个字符， 向右缩进 命令模式 >> ; 向左缩进 命令模式 <<
	set textwidth=65 (vim only) 	设置文本宽度, 从左向右计数
	set wrapmargin=15           	设置文本宽度, 从右到左计数
	set cursorline，				设置光标所在行的标识线,简写 set cul 
	set nocursorline				取消光标所在行的标识线,简写 set cul 
	set key=password				启用加密
	set key=						禁用加密
	
set 帮助(了解)
	:help option-list 
	:set
	:set all
	
==================================命令模式==================================

ZZ 			保存退出
ZQ 			不保存退出

h 			左 
l 			右 
j 			下 
k 			上
#COMMAND	跳转由#指定的个数的字符, 比如 5l 表示向右移动5个字符，5j 向下移动5个字符(相当于光标向下移动5行)


w			下一个单词的词首
e			当前或下一单词的词尾
b			当前或前一个单词的词首
#COMMAND	由#指定一次跳转的单词数.   比如 3w ，光标向右移动3个单词

H			(当前屏幕显示内容的)页首     
M			(当前屏幕显示内容的)页中间行     
L			(当前屏幕显示内容的)页底
zt			将光标所在当前行移到屏幕顶端 (了解)
zz			将光标所在当前行移到屏幕中间 (了解)
zb			将光标所在当前行移到屏幕底端 (了解)

^ 			跳转至行首的第一个非空白字符
0 			跳转至行首
$ 			跳转至行尾

#G 			或者扩展命令模式下 :# 跳转至由第#行 
G 			最后一行
gg 			第一行，1G 也可以跳到第一行

) 			下一句，以 .隔开称之为句
( 			上一句

} 			下一段, 以空行隔开称之为段
{ 			上一段

Ctrl+f 		向文件尾部翻一屏,相当于Pagedown
Ctrl+b 		向文件首部翻一屏,相当于Pageup
Ctrl+d 		向文件尾部翻半屏
Ctrl+u 		向文件首部翻半屏


x 			剪切光标处的字符
#x 			剪切光标处起始的#个字符
xp 			交换光标所在处的字符及其后面字符的位置
~ 			转换大小写
J 			删除当前行后的换行符, 这个公共可以把两行变一行


r 			只替换光标所在处的一个字符
R 			切换成REPLACE模式（在末行出现-- REPLACE -- 提示）,按ESC回到命令模式


d 			删除命令，可结合光标跳转字符，实现范围删除(d实际上是剪切)
d$ 			删除到行尾
d^ 			删除到非空行首
d0 			删除到行首
dw
de
db
#COMMAND
dd   			剪切光标所在的行
#dd 			多行删除
D				从当前光标位置一直删除到行尾，等同于d$


y 				复制，行为相似于d命令，也可结合光标跳转字符，实现范围复制
y$
y0
y^
ye
yw
yb
#COMMAND
yy：			复制行
#yy 			复制多行
Y				复制整行
	
p 				缓冲区存的如果为整行，则粘贴当前光标所在行的下方；否则，则粘贴至当前光标所在处的后面
P 				缓冲区存的如果为整行，则粘贴当前光标所在行的上方；否则，则粘贴至当前光标所在处的前面

c$				C相当于删除之后转变为insert模式(了解)
c^
c0
cb
ce
cw
#COMMAND
cc  			删除当前行并输入新内容，相当于S
#cc  
C   			删除当前光标到行尾，并切换成插入模式,相当于c$

/PATTERN：从当前光标所在处向文件尾部查找
?PATTERN：从当前光标所在处向文件首部查找
n：与命令同方向
N：与命令反方向


u 				撤销最近的更改，相当于windows中 ctrl+z
#u 				撤销之前多次更改
U 				撤消光标落在这行后所有此行的更改
Ctrl-r 			重做最后的撤消"撤消"更改，相当于windows中 crtl+y (相当于取消撤销)
. 				重复前一个操作
#. 				重复前一个操作#次
	


0y$ 			0表示先到行头，y表示从这里开始拷贝，$ 表示拷贝到本行最后一个字，也就是复制一行
	起始位置+命令+结束位置
	常见Command：y 复制、d 删除、gU 变大写、gu 变小写

100iHaHa [ESC]	粘贴"HaHa"100次	

	
di"   			删除""中的内容，前提是光标要在双引号中. i是固定写法
yi(   			删除()中的内容
vi[   			删除[]中的内容
dtx 			删除字符直到遇见光标之后的第一个 x 字符
ytx 			复制字符直到遇见光标之后的第一个 x 字符	


v 				面向字符，-- VISUAL --
V 				面向整行，-- VISUAL LINE -- 
ctrl-v 			面向块，-- VISUAL BLOCK --  (非常有用,比如批量注释)
	范例：在文件指定行的行首插入#
		1、先将光标移动到指定的第一行的行首
		2、输入ctrl+v 进入可视化模式
		3、向下移动光标，选中希望操作的每一行的第一个字符
		4、输入大写字母 I 切换至插入模式
		5、输入 # 
		6、按 ESC 键
	范例：在指定的块位置插入相同的内容
		1、光标定位到要操作的地方
		2、CTRL+v 进入“可视 块”模式，选取这一列操作多少行
		3、SHIFT+i(I)
		4、输入要插入的内容
		5、按 ESC 键

=================================多文件模式=================================

vim FILE1 FILE2 FILE3 ...
:next 下一个
:prev 前一个
:first 第一个
:last 最后一个
:wall 保存所有
:qall 不保存退出所有
:wqall保存退出所有

==================================多窗口模式==================================

多文件分割
	vim -o|-O FILE1 FILE2 ...
	-o: 水平或上下分割
	-O: 垂直或左右分割（vim only）
	在窗口间切换：Ctrl+w, 方向键

单文件窗口分割
	Ctrl+w,s		split, 水平分割，上下分屏
	Ctrl+w,v		vertical, 垂直分割，左右分屏
	ctrl+w,q		取消相邻窗口
	ctrl+w,o		取消全部窗口
	:wqall 			退出

==================================VIM寄存器==================================

有26个命名寄存器和1个无命名寄存器，常存放不同的剪贴版内容，可以在同一个主机的不同会话（终端窗口）间共享
寄存器名称a，b,…,z,格式： ”寄存器 放在数字和命令之间. 未指定，将使用无命名寄存器


3"tyy 		表示复制3行到t寄存器中 ，末行显示`3 lines yanked into "t`
"tp 		表示将t寄存器内容粘贴


有10个数字寄存器，用0，1，…，9表示，0存放最近复制内容，1存放最近删除内容。当新的文本变更和删除时，1转存到2，2转存到3，以此类推。数字寄存器不能在不同会话间共享



===============================标记和宏(macro)===============================

ma 				将当前位置标记为a，26个字母均可做标记， mb 、 mc 等等
'a 				跳转到a标记的位置，实用的文档内标记方法，文档中跳跃编辑时很有用

qa 				录制宏 a，a为宏的名称，末行提示： recording @a
q  				停止录制宏
@a 				执行宏 a
@@ 				重新执行上次执行的宏


===============================编辑二进制文件================================

#以二进制方式打开文件
vim -b binaryfile
#扩展命令模式下，利用xxd命令转换为可读的十六进制
:%!xxd
#切换至插入模式下，编辑二进制文件
#切换至扩展命令模式下，利用xxd命令转换回二进制
:%!xxd  -r
#保存退出



===============================标记和宏(macro)===============================

=================================================================================================================================================