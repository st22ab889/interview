
=======================================================================OpenVPN==================================================================

VPN
    专用网：专用网就是向电信运营商申请租用一条两个网络(例如，北京和广州)之间只传输自己信息的专线，
    虚拟私有网络(VPN, Virtual Private Network)：又称为虚拟专用网络，用于在不安全的线路上安全的传输数据。节约成本，加密安全传输.
        两个公司的网络通过vpn连起来，连接两个网络的vpn称为"站点对站点(site to site)"。
        个人通过vpn连接到远程网络称之为"peer to site"	


OpenVPN
    OpenVPN让用户通过广域网(互联网)连接到公司的内部网络，OpenVPN 适合个人出差用户。比如访问公司的ERP系统(ERP系统是综合软件，有财务模块、有销售的CRM、客户管理模块等，生产中的各种模块都有)
    OpenVPN 有免费版和商业版，商业版用起来更易用，功能可能更丰富！
    OpenVPN也支持站点对站点，如果是组织之间的长期连接(比如两个分公司和总公司连接)，最好用硬件VPN(企业级的防火墙一般都附带vpn功能)，比较稳定!
    OpenVPN处在内网和外网的边界，类似于防火墙的所处的位置。一旦建立连接，就和在内网中一样，所以vpn在连接的时候要验证身份，使用 "用户名密码+证书" 的方式进行身份验证！ 
    OpenVPN使用的端口是 TCP/1194 或 UDP/1194，OpenVPN 默认使用TCP协议，工作中推荐使用TCP协议，更稳定！	UDP协议效率高，但是在跨网络通讯的时候可能存在丢包，没有tcp稳定！
		

OpenVPN 服务端配置注意事项：
    grep -Ev "^#|^$" /etc/openvpn/server.conf				# OpenVPN 服务端配置.
    ;proto tcp 		                                        # 协议,生产推荐使用TCP
    proto udp 		                                        # 默认协议
    ;dev tap 		# 创建一个以太网隧道，以太网使用tap(工作在数据链路层,等同于一个以太网设备,操作第二层数据包,如以太网数据帧),一个tap设备允许完整的以太网帧通过Openvpn隧道，可提供非ip协议的支持，比如IPX协议和AppleTalk协议
    dev tun 		# 创建一个路由IP隧道，生产推存使用tun.互联网使用tun,一个tun设备大多时候被用于基于IP协议的通讯。tun模拟了网络层设备，操作第三层数据包(比如IP数据封包)。tun 工作在网络层
    server 10.8.0.0 255.255.255.0 	            # 客户端连接后分配IP的地址池，服务器默认会占用第一个IP，10.8.0.1将做为客户端的网关
    ifconfig-pool-persist ipp.txt 	            # 为客户端分配固定IP，不需要配置,建议注释. 客户端的地址一般不需要固定
    ;push "route 192.168.10.0 255.255.255.0" 	# 给客户端生成的到达服务器后面网段的静态路由，下一跳为openvpn服务器的 10.8.0.1
    ;push "route 192.168.20.0 255.255.255.0" 	# 推送路由信息到客户端，以允许客户端能够连接到服务器背后的其它私有子网
    ;client-config-dir ccd 						# 为指定的客户端添加路由，此路由通常是客户端后面的内网，网段而不是服务端的，也不需要设置
    ;duplicate-cn 	                            # 多个用户共用一个证书(这种情况如果不开启支持多用户，新连接建立后，旧连接就会掉线)，一般用于测试环境，生产环境都是一个用户一个证书,无需开启
    ......省略

    关键配置说明:
        server 10.8.0.0 255.255.255.0		     
            server指定虚拟网络使用的网段，当OpenVPN客户端和服务端启动后，都会生成一个虚拟的网卡，客户端和服务端都会获取一个 IP 绑定到虚拟网卡，这个IP属于server指定的网段！
            当OpenVPN客户端和服务端连接后，这两台机器相当于都在同一个小网络中(这个网络是虚拟的网络)!
        
        push "route 192.168.10.0 255.255.255.0"
            请求经OpenVPN连接进入内网，内网里面还分的有网段，需要给客户端指明这些网段，指明后这些网段会同步到客户端生成静态路由，
            当客户端请求这些网段的地址，请求就会自动路由到OpenVPN连接！
          
        client-config-dir ccd 	
            如果是"站点对站点(site to site)"形式的OpneVPN连接，就需要配置客户端后面的内网，给服务器生成到达客户端后面网段的静态路由
            如果是"个人对站点"形式的OpneVPN连接，不需要配置！


OpenVPN 客户端配置注意事项：    
    #grep '^[[:alpha:]].*' /usr/share/doc/openvpn/sample/sample-config-files/client.conf
    client 						# 声明自己是个客户端
    dev tun 					# 接口类型，必须和服务端保持一致
    proto udp 					# 协议类型，必须和服务端保持一致
    remote my-server-1 1194 	# server端的ip和端口，可以写域名但是需要可以解析成IP
    resolv-retry infinite 		# 如果是写的server端的域名，那么就始终解析，如果域名发生变化，会重新连接到新的域名对应的IP
    nobind 						# 本机不绑定监听端口，客户端是随机打开端口连接到服务端的1194
    persist-key
    persist-tun
    ca ca.crt
    cert client.crt
    key client.key
    remote-cert-tls server		# 指定采用服务器证书校验方式
    tls-auth ta.key 1
    cipher AES-256-CBC
    verb 3						# 此值不能随意指定,否则无法通信	


示例
    阿里云主机申请：
		城市里面的可用区(可用区相当于机房)，相同城市的不同可用区的机器可以相通，不同城市的机器不可以互通！
		交换机就相当于划分子网.安全组就相当于防火墙

 	基础设施：
		阿里云三台主机(CentOS 8.2)，在同一个城市的同一个可用区，这三台主机在同一内网中！
			主机1(OpenVPN Server)：用来作为跳板机，因为这台机器分配了公网地址，这个地址无法自行指定
				39.101.189.5 		# 这个公网地址也不是直接分配给主机，相当于阿里云防火墙上的公网地址，通过DNAT连接到内网的主机
				172.30.0.1/24
			主机2(httpd)：
				172.30.0.100/24
			主机3(httpd)：
				172.30.0.200/24 
		Windows 本地客户端：远程操作
			Windows 10	
		
	软件环境：
		主机1(OpenVPN Server)：
			yum info openvpn			        # Ubuntu 使用"apt show openvpn" 查看 openvpn 信息
			yum -y install openvpn easy-rs      # easy-rsa 用来管理证书(openSSL也可以管理证书,但easy-rsa更方便)。openvpn要用到大量证书，服务端和客户端(每个用户)要用到证书
			rpm -ql openvpn
			rpm -ql easy-rsa
		主机2：
			yum -y install httpd
			echo Web host 2 : 172.30.0.100  > /var/www/html/index.html
			systemctl start httpd
		主机3：
			yum -y install httpd
			echo Web host 3 : 172.30.0.200  > /var/www/html/index.html
			systemctl start httpd	   

    OpenVPN 实现CA证书:
        CA可以单独使用一个主机，但是为了节约云主机，所以和OpenVPN使用同一台机器

    OpenVPN Server 配置
        vim /etc/openvpn/server.conf
        port 1194
        proto tcp
        dev tun
        ca /etc/openvpn/certs/ca.crt
        cert /etc/openvpn/certs/server.crt
        key /etc/openvpn/certs/server.key           # This file should be kept secret
        dh /etc/openvpn/certs/dh.pem
        server 10.8.0.0 255.255.255.0               # server指定虚拟网络使用的网段
        push "route 172.30.0.0 255.255.255.0"	    # 当前环境后端私有网段为"172.30.0.0"，加上后客户端才知道后端服务器有哪些网段进行访问，这里配置的网段其实就是起路由作用
        keepalive 10 120
        cipher AES-256-CBC
        compress lz4-v2
        push "compress lz4-v2"
        max-clients 2048
        user openvpn
        group openvpn
        status /var/log/openvpn/openvpn-status.log
        log-append /var/log/openvpn/openvpn.log
        verb 3
        mute 20
		
		
	    getent passwd openvpn
	    openvpn:x:993:990:OpenVPN:/etc/openvpn:/sbin/nologin
	
	    mkdir /var/log/openvpn; chown openvpn.openvpn /var/log/openvpn			# 准备目志相关目录，注意这里要改权限	
	    echo net.ipv4.ip_forward = 1 >> /etc/sysctl.conf                        # 在服务器开启ip_forward转发功能
	    sysctl -p


        # 添加SNAT规则。注意:
        #   (1) 这里客户端相当于内网，服务器相当于外网，所以要配置SNAT，对于后端内网中的主机来说，是"OpenVPN Server"这台主机发起的请求，这台主机相当于代理
        #   (2) MASQUERADE 表示地址伪装，下列规则表示：如果是从"10.8.0.0/24"这个VPN虚拟网络过来的请求，这里源地址要伪装成"OpenVPN Server"内网的网卡地址!
        echo 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE' >> /etc/rc.d/rc.local		
        chmod +x /etc/rc.d/rc.local
        /etc/rc.d/rc.local	
	
        rpm -ql openvpn|grep systemd
        /usr/lib/systemd/system/openvpn@.service	            # centos8 无此文件, 可从CentOS7复制文件 

        rpm -ql openvpn|grep systemd
        /usr/lib/systemd/system/openvpn-client@.service		    # centos8的这个 openvpn-client@.service 和 openvpn-server@.service 文件不符合要求
        /usr/lib/systemd/system/openvpn-server@.service          

	
        ip a
        ......省略
        2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP
        group default qlen 1000
            link/ether 00:0c:29:8a:51:21 brd ff:ff:ff:ff:ff:ff
            inet 172.30.0.1/24 brd 172.30.0.255 scope global noprefixroute eth0	                    # 对于内网中的主机来说，是"172.30.0.1"发起的访问请求，因为配置了SNAT，做了MASQUERADE(地址转换)
        ......
        3: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc fq_codel state  UNKNOWN 	# 这里多了一个名为"tun0"的虚拟网卡，这个网卡就是由 OpenVPN 创建的
        group default qlen 100
            link/none
            inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0	#  "10.8.0.1"是OpenVPN的服务端地址，peer表示"点对点接口的远程端点的地址". 也就是说第一个连接的客户端的虚拟ip是 10.8.0.2, 第二个连接的客户端的虚拟ip是 10.8.0.3, 
        ......
            
        注意：peer 10.8.0.2/32 表示
            该路由的目标是一个点对点连接的对端设备，其 IP 地址为 10.8.0.2，且此地址是独占的(/32 掩码，表示单个 IP)。
            普通路由使用 via 指定下一跳网关，而 peer 专门用于点对点接口(如 OpenVPN 的 TUN 设备)


    OpenVPN 客户端配置：
	
        # 生成客户端文件,文件名后缀必须为".ovpn",因为windows的OpenVPN客户端才能识别,配置文件后缀为".ovpn"在多个OpenVPN客户端也能通用
        grep '^[[:alpha:]].*' /usr/share/doc/openvpn/sample/sample-config-files/client.conf > /etc/openvpn/client/wangxiaochun/client.ovpn
        
        cat /etc/openvpn/client/wangxiaochun/client.ovpn           # 客户端配置
        client
        dev tun
        proto tcp
        remote 39.101.189.5 1194 	# 生产中为OpenVPN公网IP
        resolv-retry infinite
        nobind
        #persist-key
        #persist-tun
        ca ca.crt
        cert wangxiaochun.crt
        key wangxiaochun.key
        remote-cert-tls server
        #tls-auth ta.key 1
        cipher AES-256-CBC
        verb 3 					# 此值不能随意指定,否则无法通信
        compress lz4-v2 		# 此项在OpenVPN2.4.X版本使用,需要和服务器端保持一致,如不指定,默认使用comp-lz压缩	


        Windows 配置部署 OpenVPN 客户端
            C:\Users\Aaron J WU>ipconfig/all
            ......
            未知适配器 本地连接:					# 在Windows中，适配器指的是网卡、蓝牙设备等，统称为适配器
            IPv4 地址 . . . . . . . . . . . . : 10.8.0.6
            ......

            C:\Users\Aaron J WU>route print             # 在Windows启动OpenVPN客户端连接成功后，查看路由信息
            ......
            IPv4 路由表
            ===========================================================================
            活动路由:
            网络目标        网络掩码          网关        接口   	   跃点数
            ......
            172.30.0.0      255.255.255.0     10.8.0.5    10.8.0.6     25		# 服务端推了一个"172.30.0.0"网段路由过来，这样客户端就知道到达"172.30.0.0"网段应该走OpenVPN
            ......


OpenVPN 高级管理功能
    故障排错
        1) explicit-exit-notify 可以支持在UDP协议时,OpenVPN重启后,客户端自动重新连接            
            vim /etc/openvpn/server.conf
            proto udp					#在udp模式下开启通知
            explicit-exit-notify 1		#在tcp模式下开启通知，会导致 OpenVPN 无法启动。tcp模式下会自动通知，也就是说OpenVPN重启后,客户端自动重新连接
            ......
        
        2) 压缩算法错误导致连接失败,OpenVPN 2.4.x 客户端支持更新的压缩算法lz4-v2, 而comp-lzo是为老版本兼容使用,两者不要在一起混用,否则可能会导致连接失败
            vim /etc/openvpn/server.conf
            compress lz4-v2                     # 开启兼容的压缩功能
            push "compress lz4-v2"
            ......省略
            
        3) 工作模式错误, OpenVPN两种工作模式:TUN和TAP,都可以支持TCP和UDP协议,但如果服务器和客户工作模式不同,比如服务器为TAP,客户端为TUN,会导致连接失败
            vim /etc/openvpn/server.conf
            dev tun					# 服务端为tun，那么客户端也应该为tun
            ;dev tap				# 服务端为tap，那么客户端也应该为tap
		
		
    高级功能
        1) 启用安全增强功能	
            启用防止DoS攻击(拒绝服务，把网络资源消耗殆尽)的安全增强配置
            为了避免DoS攻击，在 OpenVPN 中建议生成一个专门的安全增强的密钥(key)，让 OpenVPN 能够基于这个key来实现tls的身份验证功能，增强防止DoS攻击的能力！
        
        2) 设置客户端的私钥密码增强安全性
            新建一个账户magedu，并且设置证书密码，提高证书及登录VPN的安全性。

        3) 证书自动过期
            过期时间以服务器时间为准，如果过期,需要重新颁发证书
        
        4) 吊销指定的用户的证书
            假如用户离职，需要吊销用户的证书
        
        5) 账户重名证书签发
            假如员工离职后，后面新来的员工和之前离职的员工同名。有两种解决方案：
                方法1：一般的区分办法是在用户名后面加数字
                方法2：假如还想使用这个账户名签发证书，那么需要删除服务器之前的账户，并删除签发记录和证书，否则新用户的证书无法导入，删除后重新颁发证书
                
        6) 自动化的证书颁发脚本
            通过脚本实现自动化的证书颁发		
            
    生产推荐配置文件
        

=====================================================================OpenVPN原理=================================================================


在OpenVPN客户端中，虚拟网卡（如`tun0`）与物理网卡（如`eth0`或`wlan0`）之间的数据流转涉及多个网络层和组件。以下是详细的工作流程：


### **一、数据流向概览**
当客户端通过OpenVPN访问外部网络时，数据路径大致为：  
**应用程序 → 虚拟网卡（tun0） → OpenVPN进程 → 加密 → 物理网卡 → 公网**  
反向数据路径为：  
**公网 → 物理网卡 → OpenVPN进程 → 解密 → 虚拟网卡（tun0） → 应用程序**


### **二、关键步骤详解**
#### 1. **应用程序发送数据到虚拟网卡**
   - 客户端应用（如浏览器）发送数据包时，根据路由表规则，将目标IP为外网的数据包导向虚拟网卡`tun0`（而非物理网卡）。  
   - 示例路由规则（客户端）：  
     ```bash
     default via 10.8.0.1 dev tun0  # 默认路由指向OpenVPN服务器
     ```

#### 2. **OpenVPN进程捕获数据包**
   - 虚拟网卡（tun0）是一个“软件接口”，其数据由OpenVPN进程监听和处理。  
   - 当数据包到达`tun0`时，OpenVPN进程捕获这些原始IP数据包（三层数据）。

#### 3. **数据包加密与封装**
   - OpenVPN使用TLS/SSL协议对数据包进行加密，通常采用AES等对称加密算法。  
   - 加密后，数据包被封装在UDP/TCP报文中（取决于OpenVPN配置）：  
     - **UDP模式**：开销小，适合实时应用（如视频会议），但可能丢包；  
     - **TCP模式**：可靠传输，但延迟较高，适合Web浏览等应用。

#### 4. **通过物理网卡发送到公网**
   - OpenVPN进程将封装后的数据包通过物理网卡（如`eth0`）发送到公网。  
   - 此时，数据包的源IP是客户端的物理IP，目标IP是OpenVPN服务器的公网IP。

#### 5. **服务器端接收与解密**
   - 服务器通过物理网卡接收数据包，OpenVPN服务解密并还原原始数据包。  
   - 服务器根据原始数据包的目标IP，将数据路由到内网或转发到公网。


### **三、客户端路由表的关键作用**
客户端的路由表决定了哪些流量走VPN，哪些流量走本地网络：
- **全量转发（默认）**：  
  ```bash
  default via 10.8.0.1 dev tun0  # 所有流量通过VPN
  ```
- **分流模式（Split Tunnel）**：  
  ```bash
  10.8.0.0/24 dev tun0  # VPN网段走tun0
  default via 192.168.1.1 dev eth0  # 其他流量走本地网络
  ```


### **四、示例：客户端访问Google**
1. 浏览器请求`https://www.google.com`（目标IP：`172.217.16.142`）。  
2. 路由表将请求导向`tun0`（因为默认路由通过VPN）。  
3. OpenVPN进程捕获数据包，加密后封装在UDP包中，通过物理网卡发送到服务器公网IP（如`203.0.113.1`）。  
4. 服务器解密数据包，发现目标是Google，转发请求到公网。  
5. Google响应数据返回服务器，服务器加密后发送给客户端。  
6. 客户端OpenVPN进程解密数据，通过`tun0`将原始数据包交付给浏览器。


### **五、验证方法**
#### 1. **查看客户端路由表**
```bash
ip route show
# 应看到类似规则：
default via 10.8.0.1 dev tun0  # VPN为默认网关
10.8.0.0/24 dev tun0  # VPN网段
```

#### 2. **监控网络接口流量**
```bash
sudo tcpdump -i tun0  # 查看虚拟网卡流量（加密前）
sudo tcpdump -i eth0  # 查看物理网卡流量（加密后）
```

#### 3. **检查OpenVPN连接状态**
```bash
sudo systemctl status openvpn-client@client  # 查看客户端状态
```


### **六、总结：数据流转核心机制**
- **虚拟网卡与物理网卡的协作**：  
  OpenVPN通过“截获-加密-转发”机制，将虚拟网卡的数据与物理网卡桥接，实现安全通信。  
- **路由表的控制**：  
  客户端路由表决定哪些流量通过VPN，可通过配置实现全量代理或分流。  
- **加密的位置**：  
  加密发生在OpenVPN进程内，对应用程序完全透明，确保数据在公网传输时的安全性。


===================================================================Shadowsocks代理===============================================================


Shadowsocks客户端不生成虚拟网卡的核心原因在于其**工作层次和实现机制与OpenVPN完全不同**。以下从技术原理、架构设计、数据流向三个维度展开分析：


### **一、工作层次差异：网络层 vs 应用层/传输层**
#### 1. **OpenVPN：网络层（三层）虚拟网卡方案**
   - **实现原理**：  
     通过`tun/tap`设备在操作系统中创建虚拟网络接口（如`tun0`），直接处理IP数据包（三层数据），并通过修改系统路由表将流量导向虚拟网卡。  
   - **特点**：  
     对操作系统和网络栈侵入性强，需内核级权限（如Linux的`tun模块`），可实现“全流量代理”或“分流代理”（通过路由规则）。

#### 2. **Shadowsocks：应用层/传输层代理方案**
   - **实现原理**：  
     在客户端本地启动一个代理服务（如监听`1080端口`），通过**SOCKS5协议**或**HTTP代理**接收应用程序的网络请求，而非通过虚拟网卡截获数据包。  
   - **特点**：  
     工作在应用层（七层）或传输层（四层），无需修改系统网络接口，对操作系统侵入性弱，通常只需用户级权限。


### **二、Shadowsocks不生成虚拟网卡的核心原因**
#### 1. **设计目标：轻量级代理而非网络层VPN**
   - Shadowsocks的定位是“代理工具”，而非完整的VPN解决方案：  
     - 应用程序需主动配置代理（如浏览器设置代理服务器为`127.0.0.1:1080`），或通过系统全局代理设置（如Windows的“代理服务器”选项）。  
     - 不修改系统路由表，流量是否走代理由应用层决定，而非网络层强制转发。

#### 2. **兼容性与权限要求更低**
   - 虚拟网卡的创建通常需要系统级权限（如Linux的`root`、Windows的管理员权限），而Shadowsocks仅需用户权限即可运行：  
     - 在移动设备（如Android/iOS）或受限环境（如公共电脑）中，无法创建虚拟网卡，但可通过Shadowsocks客户端（如`Clash`）配置本地代理。

#### 3. **数据流向无需经过虚拟网卡**
   - **Shadowsocks数据路径**：  
     ```
     应用程序 → 本地代理端口（1080）→ Shadowsocks客户端 → 加密 → 物理网卡 → 公网
     ```  
     与OpenVPN相比，缺少“虚拟网卡截获数据包”的环节，直接通过本地端口接收应用层数据。


### **三、对比OpenVPN与Shadowsocks的数据流转**
| 维度               | OpenVPN（虚拟网卡方案）                          | Shadowsocks（代理方案）                          |
|--------------------|--------------------------------------------------|--------------------------------------------------|
| **流量截获方式**   | 通过虚拟网卡（tun0）截获IP数据包（三层）         | 通过本地端口（如1080）接收应用层请求（七层）     |
| **系统修改**       | 修改路由表，强制流量走向虚拟网卡                 | 无需修改路由表，依赖应用层代理配置               |
| **权限要求**       | 需系统级权限（创建虚拟网卡、修改路由）           | 通常只需用户权限（监听端口）                     |
| **全流量代理支持** | 天然支持（通过默认路由指向虚拟网卡）             | 需额外配置（如全局代理或PAC脚本）               |
| **设备兼容性**     | 依赖操作系统对虚拟网卡的支持（如iOS需特殊框架） | 跨平台兼容性更强（仅需端口监听功能）             |


### **四、Shadowsocks的“类虚拟网卡”实现方式（可选扩展）**
部分Shadowsocks前端工具（如`Clash`）为实现“全流量代理”，会通过以下方式模拟虚拟网卡功能：  
#### 1. **DNS劫持与TUN模式（仅部分工具支持）**
   - 在Android或Linux中，通过`TUN模式`创建轻量级虚拟网卡，但实现逻辑与OpenVPN不同：  
     - 仅截获DNS请求和部分IP流量，而非完整的三层数据包处理。  
     - 需配合规则分流（如`GeoIP`规则），而非全局路由转发。

#### 2. **系统全局代理（Windows/macOS）**
   - 在系统设置中启用“全局代理”，本质是修改WinSock或系统代理配置，而非创建虚拟网卡：  
     - 所有支持系统代理的应用（如浏览器、HTTP客户端）会走代理，UDP等非代理协议仍走本地网络。


### **五、总结：设计选择的核心逻辑**
Shadowsocks不生成虚拟网卡，是为了：  
1. **降低使用门槛**：无需系统级权限，适配更多设备（如手机、受限系统）。  
2. **简化配置**：应用层代理只需设置端口，无需复杂的路由规则。  
3. **兼容传统代理模式**：延续SOCKS/HTTP代理的成熟生态，便于与现有工具集成（如浏览器代理、PAC脚本）。  

而OpenVPN的虚拟网卡方案更适合需要“网络层强制代理”的场景（如企业内网穿透、全设备加密通信），但代价是更高的配置复杂度和权限要求。


=================================================================Shadowsocks代理原理=============================================================


Windows 的 Shadowsocks 客户端监听 1080 端口:

    开启全局模式:
        注册表: HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings
            ProxyEnable：1                                      # 启用
            ProxyServer：socks=127.0.0.1:1080
        
        控制面板 -> 网络和 Internet -> Internet选项 -> 连接 -> 局域网设置, 可以看到"代理服务器"已经被选中. 

        设置 -> 网络和 Internet -> 代理 -> 手动代理设置 -> 使用代理服务器, 可以看到为"开"的状态


    开启PAC模式: 
        注册表: HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings
            AutoConfigURL：http://127.0.0.1:1080/pac?...        # 启用
        
        控制面板 -> 网络和 Internet -> Internet选项 -> 连接 -> 局域网设置, 可以看到"使用自动配置脚本"已经被选中.    

        设置 -> 网络和 Internet -> 代理 -> 自动代理设置 -> 使用设置脚本, 可以看到为"开"的状态 


    TUN 模式: 
        概念：
            TUN 模式需要虚拟网卡的支持. TUN 模式也是一种全局模式.  
            TUN 模式是一种网络隧道技术，核心是通过虚拟网络设备(TUN 设备)处理三层IP数据包。它不关心二层数据(如以太网帧),仅处理IP层及以上的流量,适用于需要路由IP数据包的场景(如 VPN、代理分流)

        支持 TUN 模式的客户端:   
            ShadowsocksR-CSharp
                原生支持 TUN 模式，通过WinDivert底层驱动(实际就是虚拟网卡)拦截所有 TCP/UDP 流量，重定向到 1080 端口。
                下载地址如下，直接从release中下载的版本没有tun模式选项, 需自行编译或寻找第三方编译版本。 
                     https://github.com/shadowsocksr-backup/shadowsocksr-csharp
                            
            v2rayN
                选择配置 Shadowsocks, 配置完成后启动 Tun, 使用 ipconfig 可以看到生成一个名为 singbox_tun 的虚拟网卡.


         
以下是用户在 Windows 上访问 Google.com 时，Shadowsocks 的完整代理流程（假设使用默认 SOCKS5 监听 1080 端口且浏览器已配置代理）：

```mermaid
sequenceDiagram
    participant User as 用户浏览器
    participant SSClient as Shadowsocks客户端<br>(127.0.0.1:1080)
    participant SSServer as Shadowsocks服务器
    participant Google as Google.com

    User->>+SSClient: 1. 发起HTTPS请求<br>GET https://www.google.com
    Note right of SSClient: 本地SOCKS5代理端口监听中
    
    SSClient->>SSClient: 2. 加密处理
    Note right of SSClient: a. 使用选定加密算法（如AES-256）<br>b. 添加混淆头（如tls1.2_ticket）
    
    SSClient->>+SSServer: 3. 发送加密数据<br>TCP连接[SS服务器IP:8388]
    Note right of SSServer: 公网传输（加密流量）
    
    SSServer->>SSServer: 4. 解密数据
    Note right of SSServer: a. 验证密钥<br>b. 移除混淆头<br>c. 还原原始请求
    
    SSServer->>+Google: 5. 转发原始请求<br>GET https://www.google.com
    Note right of Google: 看到的是SS服务器的IP
    
    Google-->>-SSServer: 6. 返回响应数据<br>(HTML内容)
    
    SSServer->>SSServer: 7. 重新加密
    Note right of SSServer: a. 添加混淆头<br>b. 使用相同密钥加密
    
    SSServer-->>-SSClient: 8. 传回加密响应
    
    SSClient->>SSClient: 9. 本地解密
    Note right of SSClient: a. 验证数据完整性<br>b. 移除混淆头
    
    SSClient-->>-User: 10. 返回明文响应<br>显示谷歌页面
```

### 关键步骤详解：
1. **浏览器发起请求**  
   - 浏览器（配置SOCKS5代理127.0.0.1:1080）将Google.com请求发送到本地1080端口

2. **本地加密处理**  
   ```python
   # 伪代码示例
   plain_data = "GET / HTTP/1.1\r\nHost: www.google.com..."
   encrypted_data = aes256_encrypt(
       data = obfs_tls(plain_data),  # 混淆处理
       key = user_password           # 用户配置的密钥
   )
   ```

3. **加密传输到服务器**  
   - 通过TCP连接远程服务器（默认8388端口）
   - 传输内容为加密二进制数据，表现为随机流量

4. **服务器解密**  
   ```python
   decrypted_data = aes256_decrypt(
       data = received_packet,
       key = server_password          # 与客户端相同的密钥
   )
   clean_request = deobfs(decrypted_data)  # 去除混淆
   ```

5. **服务器访问Google**  
   - 使用服务器IP发起真实请求
   - Google看到的是SS服务器的IP而非用户真实IP

6. **返回路径加密**  
   - 响应数据在服务器端重新加密
   - 添加相同的混淆头（如伪装成TLS流量）

7. **客户端最终解密**  
   - 浏览器收到看似随机的数据
   - SS客户端解密后还原成标准HTTP响应

### 流量特征对比
| 传输段          | 数据形态               | 可识别性             |
|----------------|-----------------------|---------------------|
| 用户PC → SS客户端 | 明文HTTP请求          | 可识别为Google访问   |
| SS客户端 → SS服务器 | 加密随机数据          | 无法识别内容         |
| SS服务器 → Google | 标准HTTPS流量         | 可识别但IP为服务器   |

### 为什么能绕过防火墙？
1. **协议伪装**：混淆模块使流量像普通HTTPS（如模仿TLS握手）
2. **加密保护**：AES等加密使内容不可解读
3. **IP隐藏**：Google只看到服务器IP而非用户真实IP
4. **端口复用**：使用常见端口（如443）避免阻断

> 📌 **注意**：若使用全局模式/TUN模式，流程在步骤1前会增加系统流量劫持环节，但核心加密传输原理相同。整个过程用户真实IP仅在SS客户端→SS服务器段暴露一次（通过加密通道）。


=======================================================================SOCKS5====================================================================


SOCKS5 是一种网络代理协议，用于在客户端和服务器之间建立通信隧道，允许客户端通过代理服务器间接访问目标服务器。以下是其核心概念和特点的简明解释：


### **一、核心功能**
- **代理访问**：客户端通过 SOCKS5 代理服务器访问目标服务器，隐藏真实 IP 地址。
- **协议无关**：支持 TCP 和 UDP 流量，适用于任何基于这两种协议的应用（如浏览器、邮件客户端）。
- **身份验证**：支持无验证、用户名/密码验证等方式，增强安全性。


### **二、工作流程**
1. **客户端连接代理服务器**：  
   客户端向 SOCKS5 代理服务器（如 `127.0.0.1:1080`）发起连接。

2. **协商认证方式**：  
   客户端和代理服务器协商认证方式（如无验证或用户名/密码）。

3. **请求转发**：  
   客户端发送请求，包含目标服务器的地址（域名或 IP）和端口（如 `google.com:443`）。

4. **代理服务器建立连接**：  
   代理服务器根据请求连接目标服务器，并将双方数据转发。

5. **数据传输**：  
   客户端与目标服务器之间的数据通过代理服务器中转，实现隐藏真实 IP。


### **三、与 HTTP 代理的区别**
| **特性**           | **SOCKS5 代理**                  | **HTTP 代理**                    |
|--------------------|----------------------------------|----------------------------------|
| **协议支持**       | TCP 和 UDP                      | 主要支持 HTTP（部分支持 HTTPS）  |
| **应用层处理**     | 仅转发数据，不解析应用层协议     | 解析 HTTP 请求，可修改请求内容   |
| **适用场景**       | 通用代理（如 SSH、VPN 等）       | 主要用于 Web 浏览               |
| **端口号**         | 常见 1080                       | 常见 8080                       |


### **四、典型应用场景**
1. **突破网络限制**：通过代理服务器访问被封锁的网站或服务。
2. **隐藏真实 IP**：在网络通信中隐藏客户端的真实 IP 地址，增强隐私性。
3. **企业内网访问**：企业员工通过 SOCKS5 代理安全访问内部资源。
4. **爬虫与数据采集**：通过代理服务器分发请求，避免被目标网站封禁。


### **五、安全注意事项**
- **中间人攻击风险**：SOCKS5 本身不加密流量，建议配合 HTTPS 等加密协议使用。
- **选择可信代理**：使用不可信的代理服务器可能导致数据泄露或监控。
- **性能影响**：代理会增加网络延迟，尤其在跨国代理时更为明显。


### **六、常见实现工具**
- **客户端**：Shadowsocks、Privoxy、Proxifier 等。
- **服务器**：danted、Shadowsocks 服务端等。


### **七、验证方法**
使用 `curl` 命令测试 SOCKS5 代理：
```bash
curl --socks5 127.0.0.1:1080 https://ipinfo.io  # 返回代理服务器的 IP 信息
curl https://ipinfo.io  # 返回客户端真实 IP（不使用代理）
```


### **八、总结**
SOCKS5 是一种灵活的底层代理协议，通过中间人角色实现跨网络通信，适用于多种应用场景。与 HTTP 代理相比，它更通用但不处理应用层协议，需结合其他加密手段确保安全性。

